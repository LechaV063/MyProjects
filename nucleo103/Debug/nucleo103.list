
nucleo103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015cc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080016d8  080016d8  000026d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001704  08001704  0000300c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001704  08001704  0000300c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001704  08001704  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001704  08001704  00002704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001708  08001708  00002708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800170c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  2000000c  08001718  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  08001718  0000307c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000691a  00000000  00000000  00003035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000143a  00000000  00000000  0000994f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000628  00000000  00000000  0000ad90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004ad  00000000  00000000  0000b3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016031  00000000  00000000  0000b865  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007017  00000000  00000000  00021896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e4fe  00000000  00000000  000288ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a6dab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001768  00000000  00000000  000a6df0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000a8558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080016c0 	.word	0x080016c0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080016c0 	.word	0x080016c0

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 f9ee 	bl	8000530 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f80e 	bl	8000174 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f878 	bl	800024c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800015c:	f000 f84c 	bl	80001f8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  init_led(LED_GPIO_Port,LED_Pin);
 8000160:	2120      	movs	r1, #32
 8000162:	4803      	ldr	r0, [pc, #12]	@ (8000170 <main+0x24>)
 8000164:	f001 f9f6 	bl	8001554 <init_led>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 8000168:	f001 fa2e 	bl	80015c8 <loop>
 800016c:	e7fc      	b.n	8000168 <main+0x1c>
 800016e:	bf00      	nop
 8000170:	40010800 	.word	0x40010800

08000174 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000174:	b580      	push	{r7, lr}
 8000176:	b090      	sub	sp, #64	@ 0x40
 8000178:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800017a:	f107 0318 	add.w	r3, r7, #24
 800017e:	2228      	movs	r2, #40	@ 0x28
 8000180:	2100      	movs	r1, #0
 8000182:	4618      	mov	r0, r3
 8000184:	f001 fa70 	bl	8001668 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000188:	1d3b      	adds	r3, r7, #4
 800018a:	2200      	movs	r2, #0
 800018c:	601a      	str	r2, [r3, #0]
 800018e:	605a      	str	r2, [r3, #4]
 8000190:	609a      	str	r2, [r3, #8]
 8000192:	60da      	str	r2, [r3, #12]
 8000194:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000196:	2302      	movs	r3, #2
 8000198:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800019a:	2301      	movs	r3, #1
 800019c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800019e:	2310      	movs	r3, #16
 80001a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001a2:	2302      	movs	r3, #2
 80001a4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001a6:	2300      	movs	r3, #0
 80001a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001aa:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80001ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001b0:	f107 0318 	add.w	r3, r7, #24
 80001b4:	4618      	mov	r0, r3
 80001b6:	f000 fcdf 	bl	8000b78 <HAL_RCC_OscConfig>
 80001ba:	4603      	mov	r3, r0
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d001      	beq.n	80001c4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80001c0:	f000 f8b2 	bl	8000328 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001c4:	230f      	movs	r3, #15
 80001c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001c8:	2302      	movs	r3, #2
 80001ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001cc:	2300      	movs	r3, #0
 80001ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80001d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001d6:	2300      	movs	r3, #0
 80001d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001da:	1d3b      	adds	r3, r7, #4
 80001dc:	2102      	movs	r1, #2
 80001de:	4618      	mov	r0, r3
 80001e0:	f000 ff4c 	bl	800107c <HAL_RCC_ClockConfig>
 80001e4:	4603      	mov	r3, r0
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d001      	beq.n	80001ee <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80001ea:	f000 f89d 	bl	8000328 <Error_Handler>
  }
}
 80001ee:	bf00      	nop
 80001f0:	3740      	adds	r7, #64	@ 0x40
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bd80      	pop	{r7, pc}
	...

080001f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80001fc:	4b11      	ldr	r3, [pc, #68]	@ (8000244 <MX_USART2_UART_Init+0x4c>)
 80001fe:	4a12      	ldr	r2, [pc, #72]	@ (8000248 <MX_USART2_UART_Init+0x50>)
 8000200:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000202:	4b10      	ldr	r3, [pc, #64]	@ (8000244 <MX_USART2_UART_Init+0x4c>)
 8000204:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000208:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800020a:	4b0e      	ldr	r3, [pc, #56]	@ (8000244 <MX_USART2_UART_Init+0x4c>)
 800020c:	2200      	movs	r2, #0
 800020e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000210:	4b0c      	ldr	r3, [pc, #48]	@ (8000244 <MX_USART2_UART_Init+0x4c>)
 8000212:	2200      	movs	r2, #0
 8000214:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000216:	4b0b      	ldr	r3, [pc, #44]	@ (8000244 <MX_USART2_UART_Init+0x4c>)
 8000218:	2200      	movs	r2, #0
 800021a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800021c:	4b09      	ldr	r3, [pc, #36]	@ (8000244 <MX_USART2_UART_Init+0x4c>)
 800021e:	220c      	movs	r2, #12
 8000220:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000222:	4b08      	ldr	r3, [pc, #32]	@ (8000244 <MX_USART2_UART_Init+0x4c>)
 8000224:	2200      	movs	r2, #0
 8000226:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000228:	4b06      	ldr	r3, [pc, #24]	@ (8000244 <MX_USART2_UART_Init+0x4c>)
 800022a:	2200      	movs	r2, #0
 800022c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800022e:	4805      	ldr	r0, [pc, #20]	@ (8000244 <MX_USART2_UART_Init+0x4c>)
 8000230:	f001 f8b2 	bl	8001398 <HAL_UART_Init>
 8000234:	4603      	mov	r3, r0
 8000236:	2b00      	cmp	r3, #0
 8000238:	d001      	beq.n	800023e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800023a:	f000 f875 	bl	8000328 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800023e:	bf00      	nop
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop
 8000244:	20000028 	.word	0x20000028
 8000248:	40004400 	.word	0x40004400

0800024c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b088      	sub	sp, #32
 8000250:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000252:	f107 0310 	add.w	r3, r7, #16
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
 800025a:	605a      	str	r2, [r3, #4]
 800025c:	609a      	str	r2, [r3, #8]
 800025e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000260:	4b2d      	ldr	r3, [pc, #180]	@ (8000318 <MX_GPIO_Init+0xcc>)
 8000262:	699b      	ldr	r3, [r3, #24]
 8000264:	4a2c      	ldr	r2, [pc, #176]	@ (8000318 <MX_GPIO_Init+0xcc>)
 8000266:	f043 0310 	orr.w	r3, r3, #16
 800026a:	6193      	str	r3, [r2, #24]
 800026c:	4b2a      	ldr	r3, [pc, #168]	@ (8000318 <MX_GPIO_Init+0xcc>)
 800026e:	699b      	ldr	r3, [r3, #24]
 8000270:	f003 0310 	and.w	r3, r3, #16
 8000274:	60fb      	str	r3, [r7, #12]
 8000276:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000278:	4b27      	ldr	r3, [pc, #156]	@ (8000318 <MX_GPIO_Init+0xcc>)
 800027a:	699b      	ldr	r3, [r3, #24]
 800027c:	4a26      	ldr	r2, [pc, #152]	@ (8000318 <MX_GPIO_Init+0xcc>)
 800027e:	f043 0320 	orr.w	r3, r3, #32
 8000282:	6193      	str	r3, [r2, #24]
 8000284:	4b24      	ldr	r3, [pc, #144]	@ (8000318 <MX_GPIO_Init+0xcc>)
 8000286:	699b      	ldr	r3, [r3, #24]
 8000288:	f003 0320 	and.w	r3, r3, #32
 800028c:	60bb      	str	r3, [r7, #8]
 800028e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000290:	4b21      	ldr	r3, [pc, #132]	@ (8000318 <MX_GPIO_Init+0xcc>)
 8000292:	699b      	ldr	r3, [r3, #24]
 8000294:	4a20      	ldr	r2, [pc, #128]	@ (8000318 <MX_GPIO_Init+0xcc>)
 8000296:	f043 0304 	orr.w	r3, r3, #4
 800029a:	6193      	str	r3, [r2, #24]
 800029c:	4b1e      	ldr	r3, [pc, #120]	@ (8000318 <MX_GPIO_Init+0xcc>)
 800029e:	699b      	ldr	r3, [r3, #24]
 80002a0:	f003 0304 	and.w	r3, r3, #4
 80002a4:	607b      	str	r3, [r7, #4]
 80002a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000318 <MX_GPIO_Init+0xcc>)
 80002aa:	699b      	ldr	r3, [r3, #24]
 80002ac:	4a1a      	ldr	r2, [pc, #104]	@ (8000318 <MX_GPIO_Init+0xcc>)
 80002ae:	f043 0308 	orr.w	r3, r3, #8
 80002b2:	6193      	str	r3, [r2, #24]
 80002b4:	4b18      	ldr	r3, [pc, #96]	@ (8000318 <MX_GPIO_Init+0xcc>)
 80002b6:	699b      	ldr	r3, [r3, #24]
 80002b8:	f003 0308 	and.w	r3, r3, #8
 80002bc:	603b      	str	r3, [r7, #0]
 80002be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80002c0:	2200      	movs	r2, #0
 80002c2:	2120      	movs	r1, #32
 80002c4:	4815      	ldr	r0, [pc, #84]	@ (800031c <MX_GPIO_Init+0xd0>)
 80002c6:	f000 fc27 	bl	8000b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 80002ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80002ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80002d0:	4b13      	ldr	r3, [pc, #76]	@ (8000320 <MX_GPIO_Init+0xd4>)
 80002d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d4:	2300      	movs	r3, #0
 80002d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80002d8:	f107 0310 	add.w	r3, r7, #16
 80002dc:	4619      	mov	r1, r3
 80002de:	4811      	ldr	r0, [pc, #68]	@ (8000324 <MX_GPIO_Init+0xd8>)
 80002e0:	f000 fa96 	bl	8000810 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80002e4:	2320      	movs	r3, #32
 80002e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002e8:	2301      	movs	r3, #1
 80002ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ec:	2300      	movs	r3, #0
 80002ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002f0:	2302      	movs	r3, #2
 80002f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80002f4:	f107 0310 	add.w	r3, r7, #16
 80002f8:	4619      	mov	r1, r3
 80002fa:	4808      	ldr	r0, [pc, #32]	@ (800031c <MX_GPIO_Init+0xd0>)
 80002fc:	f000 fa88 	bl	8000810 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8000300:	2200      	movs	r2, #0
 8000302:	2103      	movs	r1, #3
 8000304:	2028      	movs	r0, #40	@ 0x28
 8000306:	f000 fa4c 	bl	80007a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800030a:	2028      	movs	r0, #40	@ 0x28
 800030c:	f000 fa65 	bl	80007da <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000310:	bf00      	nop
 8000312:	3720      	adds	r7, #32
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}
 8000318:	40021000 	.word	0x40021000
 800031c:	40010800 	.word	0x40010800
 8000320:	10110000 	.word	0x10110000
 8000324:	40011000 	.word	0x40011000

08000328 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000328:	b480      	push	{r7}
 800032a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800032c:	b672      	cpsid	i
}
 800032e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000330:	bf00      	nop
 8000332:	e7fd      	b.n	8000330 <Error_Handler+0x8>

08000334 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000334:	b480      	push	{r7}
 8000336:	b085      	sub	sp, #20
 8000338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800033a:	4b15      	ldr	r3, [pc, #84]	@ (8000390 <HAL_MspInit+0x5c>)
 800033c:	699b      	ldr	r3, [r3, #24]
 800033e:	4a14      	ldr	r2, [pc, #80]	@ (8000390 <HAL_MspInit+0x5c>)
 8000340:	f043 0301 	orr.w	r3, r3, #1
 8000344:	6193      	str	r3, [r2, #24]
 8000346:	4b12      	ldr	r3, [pc, #72]	@ (8000390 <HAL_MspInit+0x5c>)
 8000348:	699b      	ldr	r3, [r3, #24]
 800034a:	f003 0301 	and.w	r3, r3, #1
 800034e:	60bb      	str	r3, [r7, #8]
 8000350:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000352:	4b0f      	ldr	r3, [pc, #60]	@ (8000390 <HAL_MspInit+0x5c>)
 8000354:	69db      	ldr	r3, [r3, #28]
 8000356:	4a0e      	ldr	r2, [pc, #56]	@ (8000390 <HAL_MspInit+0x5c>)
 8000358:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800035c:	61d3      	str	r3, [r2, #28]
 800035e:	4b0c      	ldr	r3, [pc, #48]	@ (8000390 <HAL_MspInit+0x5c>)
 8000360:	69db      	ldr	r3, [r3, #28]
 8000362:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000366:	607b      	str	r3, [r7, #4]
 8000368:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800036a:	4b0a      	ldr	r3, [pc, #40]	@ (8000394 <HAL_MspInit+0x60>)
 800036c:	685b      	ldr	r3, [r3, #4]
 800036e:	60fb      	str	r3, [r7, #12]
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000376:	60fb      	str	r3, [r7, #12]
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800037e:	60fb      	str	r3, [r7, #12]
 8000380:	4a04      	ldr	r2, [pc, #16]	@ (8000394 <HAL_MspInit+0x60>)
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000386:	bf00      	nop
 8000388:	3714      	adds	r7, #20
 800038a:	46bd      	mov	sp, r7
 800038c:	bc80      	pop	{r7}
 800038e:	4770      	bx	lr
 8000390:	40021000 	.word	0x40021000
 8000394:	40010000 	.word	0x40010000

08000398 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b088      	sub	sp, #32
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003a0:	f107 0310 	add.w	r3, r7, #16
 80003a4:	2200      	movs	r2, #0
 80003a6:	601a      	str	r2, [r3, #0]
 80003a8:	605a      	str	r2, [r3, #4]
 80003aa:	609a      	str	r2, [r3, #8]
 80003ac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	4a15      	ldr	r2, [pc, #84]	@ (8000408 <HAL_UART_MspInit+0x70>)
 80003b4:	4293      	cmp	r3, r2
 80003b6:	d123      	bne.n	8000400 <HAL_UART_MspInit+0x68>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80003b8:	4b14      	ldr	r3, [pc, #80]	@ (800040c <HAL_UART_MspInit+0x74>)
 80003ba:	69db      	ldr	r3, [r3, #28]
 80003bc:	4a13      	ldr	r2, [pc, #76]	@ (800040c <HAL_UART_MspInit+0x74>)
 80003be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003c2:	61d3      	str	r3, [r2, #28]
 80003c4:	4b11      	ldr	r3, [pc, #68]	@ (800040c <HAL_UART_MspInit+0x74>)
 80003c6:	69db      	ldr	r3, [r3, #28]
 80003c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80003cc:	60fb      	str	r3, [r7, #12]
 80003ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d0:	4b0e      	ldr	r3, [pc, #56]	@ (800040c <HAL_UART_MspInit+0x74>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	4a0d      	ldr	r2, [pc, #52]	@ (800040c <HAL_UART_MspInit+0x74>)
 80003d6:	f043 0304 	orr.w	r3, r3, #4
 80003da:	6193      	str	r3, [r2, #24]
 80003dc:	4b0b      	ldr	r3, [pc, #44]	@ (800040c <HAL_UART_MspInit+0x74>)
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	f003 0304 	and.w	r3, r3, #4
 80003e4:	60bb      	str	r3, [r7, #8]
 80003e6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80003e8:	230c      	movs	r3, #12
 80003ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003ec:	2302      	movs	r3, #2
 80003ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f0:	2302      	movs	r3, #2
 80003f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003f4:	f107 0310 	add.w	r3, r7, #16
 80003f8:	4619      	mov	r1, r3
 80003fa:	4805      	ldr	r0, [pc, #20]	@ (8000410 <HAL_UART_MspInit+0x78>)
 80003fc:	f000 fa08 	bl	8000810 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000400:	bf00      	nop
 8000402:	3720      	adds	r7, #32
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	40004400 	.word	0x40004400
 800040c:	40021000 	.word	0x40021000
 8000410:	40010800 	.word	0x40010800

08000414 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000418:	bf00      	nop
 800041a:	e7fd      	b.n	8000418 <NMI_Handler+0x4>

0800041c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000420:	bf00      	nop
 8000422:	e7fd      	b.n	8000420 <HardFault_Handler+0x4>

08000424 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000428:	bf00      	nop
 800042a:	e7fd      	b.n	8000428 <MemManage_Handler+0x4>

0800042c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000430:	bf00      	nop
 8000432:	e7fd      	b.n	8000430 <BusFault_Handler+0x4>

08000434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000438:	bf00      	nop
 800043a:	e7fd      	b.n	8000438 <UsageFault_Handler+0x4>

0800043c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000440:	bf00      	nop
 8000442:	46bd      	mov	sp, r7
 8000444:	bc80      	pop	{r7}
 8000446:	4770      	bx	lr

08000448 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800044c:	bf00      	nop
 800044e:	46bd      	mov	sp, r7
 8000450:	bc80      	pop	{r7}
 8000452:	4770      	bx	lr

08000454 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000458:	bf00      	nop
 800045a:	46bd      	mov	sp, r7
 800045c:	bc80      	pop	{r7}
 800045e:	4770      	bx	lr

08000460 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000464:	f000 f8aa 	bl	80005bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000468:	bf00      	nop
 800046a:	bd80      	pop	{r7, pc}

0800046c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Pin);
 8000470:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000474:	f000 fb68 	bl	8000b48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000478:	bf00      	nop
 800047a:	bd80      	pop	{r7, pc}

0800047c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000480:	4b15      	ldr	r3, [pc, #84]	@ (80004d8 <SystemInit+0x5c>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4a14      	ldr	r2, [pc, #80]	@ (80004d8 <SystemInit+0x5c>)
 8000486:	f043 0301 	orr.w	r3, r3, #1
 800048a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800048c:	4b12      	ldr	r3, [pc, #72]	@ (80004d8 <SystemInit+0x5c>)
 800048e:	685a      	ldr	r2, [r3, #4]
 8000490:	4911      	ldr	r1, [pc, #68]	@ (80004d8 <SystemInit+0x5c>)
 8000492:	4b12      	ldr	r3, [pc, #72]	@ (80004dc <SystemInit+0x60>)
 8000494:	4013      	ands	r3, r2
 8000496:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000498:	4b0f      	ldr	r3, [pc, #60]	@ (80004d8 <SystemInit+0x5c>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4a0e      	ldr	r2, [pc, #56]	@ (80004d8 <SystemInit+0x5c>)
 800049e:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 80004a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80004a6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80004a8:	4b0b      	ldr	r3, [pc, #44]	@ (80004d8 <SystemInit+0x5c>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4a0a      	ldr	r2, [pc, #40]	@ (80004d8 <SystemInit+0x5c>)
 80004ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80004b2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80004b4:	4b08      	ldr	r3, [pc, #32]	@ (80004d8 <SystemInit+0x5c>)
 80004b6:	685b      	ldr	r3, [r3, #4]
 80004b8:	4a07      	ldr	r2, [pc, #28]	@ (80004d8 <SystemInit+0x5c>)
 80004ba:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
 80004be:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80004c0:	4b05      	ldr	r3, [pc, #20]	@ (80004d8 <SystemInit+0x5c>)
 80004c2:	f44f 021f 	mov.w	r2, #10420224	@ 0x9f0000
 80004c6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80004c8:	4b05      	ldr	r3, [pc, #20]	@ (80004e0 <SystemInit+0x64>)
 80004ca:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80004ce:	609a      	str	r2, [r3, #8]
#endif 
}
 80004d0:	bf00      	nop
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc80      	pop	{r7}
 80004d6:	4770      	bx	lr
 80004d8:	40021000 	.word	0x40021000
 80004dc:	f8ff0000 	.word	0xf8ff0000
 80004e0:	e000ed00 	.word	0xe000ed00

080004e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80004e4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80004e6:	e003      	b.n	80004f0 <LoopCopyDataInit>

080004e8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80004e8:	4b0b      	ldr	r3, [pc, #44]	@ (8000518 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80004ea:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80004ec:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80004ee:	3104      	adds	r1, #4

080004f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80004f0:	480a      	ldr	r0, [pc, #40]	@ (800051c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80004f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000520 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80004f4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80004f6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80004f8:	d3f6      	bcc.n	80004e8 <CopyDataInit>
  ldr r2, =_sbss
 80004fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000524 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80004fc:	e002      	b.n	8000504 <LoopFillZerobss>

080004fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80004fe:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000500:	f842 3b04 	str.w	r3, [r2], #4

08000504 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000504:	4b08      	ldr	r3, [pc, #32]	@ (8000528 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000506:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000508:	d3f9      	bcc.n	80004fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800050a:	f7ff ffb7 	bl	800047c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800050e:	f001 f8b3 	bl	8001678 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000512:	f7ff fe1b 	bl	800014c <main>
  bx lr
 8000516:	4770      	bx	lr
  ldr r3, =_sidata
 8000518:	0800170c 	.word	0x0800170c
  ldr r0, =_sdata
 800051c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000520:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000524:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000528:	2000007c 	.word	0x2000007c

0800052c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800052c:	e7fe      	b.n	800052c <ADC1_2_IRQHandler>
	...

08000530 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000534:	4b08      	ldr	r3, [pc, #32]	@ (8000558 <HAL_Init+0x28>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a07      	ldr	r2, [pc, #28]	@ (8000558 <HAL_Init+0x28>)
 800053a:	f043 0310 	orr.w	r3, r3, #16
 800053e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000540:	2003      	movs	r0, #3
 8000542:	f000 f923 	bl	800078c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000546:	2001      	movs	r0, #1
 8000548:	f000 f808 	bl	800055c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800054c:	f7ff fef2 	bl	8000334 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000550:	2300      	movs	r3, #0
}
 8000552:	4618      	mov	r0, r3
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	40022000 	.word	0x40022000

0800055c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000564:	4b12      	ldr	r3, [pc, #72]	@ (80005b0 <HAL_InitTick+0x54>)
 8000566:	681a      	ldr	r2, [r3, #0]
 8000568:	4b12      	ldr	r3, [pc, #72]	@ (80005b4 <HAL_InitTick+0x58>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	4619      	mov	r1, r3
 800056e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000572:	fbb3 f3f1 	udiv	r3, r3, r1
 8000576:	fbb2 f3f3 	udiv	r3, r2, r3
 800057a:	4618      	mov	r0, r3
 800057c:	f000 f93b 	bl	80007f6 <HAL_SYSTICK_Config>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000586:	2301      	movs	r3, #1
 8000588:	e00e      	b.n	80005a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	2b0f      	cmp	r3, #15
 800058e:	d80a      	bhi.n	80005a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000590:	2200      	movs	r2, #0
 8000592:	6879      	ldr	r1, [r7, #4]
 8000594:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000598:	f000 f903 	bl	80007a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800059c:	4a06      	ldr	r2, [pc, #24]	@ (80005b8 <HAL_InitTick+0x5c>)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005a2:	2300      	movs	r3, #0
 80005a4:	e000      	b.n	80005a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005a6:	2301      	movs	r3, #1
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000000 	.word	0x20000000
 80005b4:	20000008 	.word	0x20000008
 80005b8:	20000004 	.word	0x20000004

080005bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005c0:	4b05      	ldr	r3, [pc, #20]	@ (80005d8 <HAL_IncTick+0x1c>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	461a      	mov	r2, r3
 80005c6:	4b05      	ldr	r3, [pc, #20]	@ (80005dc <HAL_IncTick+0x20>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4413      	add	r3, r2
 80005cc:	4a03      	ldr	r2, [pc, #12]	@ (80005dc <HAL_IncTick+0x20>)
 80005ce:	6013      	str	r3, [r2, #0]
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bc80      	pop	{r7}
 80005d6:	4770      	bx	lr
 80005d8:	20000008 	.word	0x20000008
 80005dc:	20000074 	.word	0x20000074

080005e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  return uwTick;
 80005e4:	4b02      	ldr	r3, [pc, #8]	@ (80005f0 <HAL_GetTick+0x10>)
 80005e6:	681b      	ldr	r3, [r3, #0]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bc80      	pop	{r7}
 80005ee:	4770      	bx	lr
 80005f0:	20000074 	.word	0x20000074

080005f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	f003 0307 	and.w	r3, r3, #7
 8000602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000604:	4b0c      	ldr	r3, [pc, #48]	@ (8000638 <__NVIC_SetPriorityGrouping+0x44>)
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800060a:	68ba      	ldr	r2, [r7, #8]
 800060c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000610:	4013      	ands	r3, r2
 8000612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800061c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000620:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000626:	4a04      	ldr	r2, [pc, #16]	@ (8000638 <__NVIC_SetPriorityGrouping+0x44>)
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	60d3      	str	r3, [r2, #12]
}
 800062c:	bf00      	nop
 800062e:	3714      	adds	r7, #20
 8000630:	46bd      	mov	sp, r7
 8000632:	bc80      	pop	{r7}
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	e000ed00 	.word	0xe000ed00

0800063c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000640:	4b04      	ldr	r3, [pc, #16]	@ (8000654 <__NVIC_GetPriorityGrouping+0x18>)
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	0a1b      	lsrs	r3, r3, #8
 8000646:	f003 0307 	and.w	r3, r3, #7
}
 800064a:	4618      	mov	r0, r3
 800064c:	46bd      	mov	sp, r7
 800064e:	bc80      	pop	{r7}
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	e000ed00 	.word	0xe000ed00

08000658 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000666:	2b00      	cmp	r3, #0
 8000668:	db0b      	blt.n	8000682 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	f003 021f 	and.w	r2, r3, #31
 8000670:	4906      	ldr	r1, [pc, #24]	@ (800068c <__NVIC_EnableIRQ+0x34>)
 8000672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000676:	095b      	lsrs	r3, r3, #5
 8000678:	2001      	movs	r0, #1
 800067a:	fa00 f202 	lsl.w	r2, r0, r2
 800067e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	bc80      	pop	{r7}
 800068a:	4770      	bx	lr
 800068c:	e000e100 	.word	0xe000e100

08000690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	6039      	str	r1, [r7, #0]
 800069a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	db0a      	blt.n	80006ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	490c      	ldr	r1, [pc, #48]	@ (80006dc <__NVIC_SetPriority+0x4c>)
 80006aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ae:	0112      	lsls	r2, r2, #4
 80006b0:	b2d2      	uxtb	r2, r2
 80006b2:	440b      	add	r3, r1
 80006b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006b8:	e00a      	b.n	80006d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	4908      	ldr	r1, [pc, #32]	@ (80006e0 <__NVIC_SetPriority+0x50>)
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	f003 030f 	and.w	r3, r3, #15
 80006c6:	3b04      	subs	r3, #4
 80006c8:	0112      	lsls	r2, r2, #4
 80006ca:	b2d2      	uxtb	r2, r2
 80006cc:	440b      	add	r3, r1
 80006ce:	761a      	strb	r2, [r3, #24]
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bc80      	pop	{r7}
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	e000e100 	.word	0xe000e100
 80006e0:	e000ed00 	.word	0xe000ed00

080006e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b089      	sub	sp, #36	@ 0x24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	f003 0307 	and.w	r3, r3, #7
 80006f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f8:	69fb      	ldr	r3, [r7, #28]
 80006fa:	f1c3 0307 	rsb	r3, r3, #7
 80006fe:	2b04      	cmp	r3, #4
 8000700:	bf28      	it	cs
 8000702:	2304      	movcs	r3, #4
 8000704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	3304      	adds	r3, #4
 800070a:	2b06      	cmp	r3, #6
 800070c:	d902      	bls.n	8000714 <NVIC_EncodePriority+0x30>
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	3b03      	subs	r3, #3
 8000712:	e000      	b.n	8000716 <NVIC_EncodePriority+0x32>
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000718:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800071c:	69bb      	ldr	r3, [r7, #24]
 800071e:	fa02 f303 	lsl.w	r3, r2, r3
 8000722:	43da      	mvns	r2, r3
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	401a      	ands	r2, r3
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800072c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	fa01 f303 	lsl.w	r3, r1, r3
 8000736:	43d9      	mvns	r1, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800073c:	4313      	orrs	r3, r2
         );
}
 800073e:	4618      	mov	r0, r3
 8000740:	3724      	adds	r7, #36	@ 0x24
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr

08000748 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	3b01      	subs	r3, #1
 8000754:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000758:	d301      	bcc.n	800075e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800075a:	2301      	movs	r3, #1
 800075c:	e00f      	b.n	800077e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800075e:	4a0a      	ldr	r2, [pc, #40]	@ (8000788 <SysTick_Config+0x40>)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	3b01      	subs	r3, #1
 8000764:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000766:	210f      	movs	r1, #15
 8000768:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800076c:	f7ff ff90 	bl	8000690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000770:	4b05      	ldr	r3, [pc, #20]	@ (8000788 <SysTick_Config+0x40>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000776:	4b04      	ldr	r3, [pc, #16]	@ (8000788 <SysTick_Config+0x40>)
 8000778:	2207      	movs	r2, #7
 800077a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800077c:	2300      	movs	r3, #0
}
 800077e:	4618      	mov	r0, r3
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	e000e010 	.word	0xe000e010

0800078c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f7ff ff2d 	bl	80005f4 <__NVIC_SetPriorityGrouping>
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b086      	sub	sp, #24
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	4603      	mov	r3, r0
 80007aa:	60b9      	str	r1, [r7, #8]
 80007ac:	607a      	str	r2, [r7, #4]
 80007ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007b4:	f7ff ff42 	bl	800063c <__NVIC_GetPriorityGrouping>
 80007b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ba:	687a      	ldr	r2, [r7, #4]
 80007bc:	68b9      	ldr	r1, [r7, #8]
 80007be:	6978      	ldr	r0, [r7, #20]
 80007c0:	f7ff ff90 	bl	80006e4 <NVIC_EncodePriority>
 80007c4:	4602      	mov	r2, r0
 80007c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ca:	4611      	mov	r1, r2
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff ff5f 	bl	8000690 <__NVIC_SetPriority>
}
 80007d2:	bf00      	nop
 80007d4:	3718      	adds	r7, #24
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}

080007da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007da:	b580      	push	{r7, lr}
 80007dc:	b082      	sub	sp, #8
 80007de:	af00      	add	r7, sp, #0
 80007e0:	4603      	mov	r3, r0
 80007e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff ff35 	bl	8000658 <__NVIC_EnableIRQ>
}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b082      	sub	sp, #8
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f7ff ffa2 	bl	8000748 <SysTick_Config>
 8000804:	4603      	mov	r3, r0
}
 8000806:	4618      	mov	r0, r3
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000810:	b480      	push	{r7}
 8000812:	b08b      	sub	sp, #44	@ 0x2c
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800081a:	2300      	movs	r3, #0
 800081c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800081e:	2300      	movs	r3, #0
 8000820:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000822:	e169      	b.n	8000af8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000824:	2201      	movs	r2, #1
 8000826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000828:	fa02 f303 	lsl.w	r3, r2, r3
 800082c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	69fa      	ldr	r2, [r7, #28]
 8000834:	4013      	ands	r3, r2
 8000836:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000838:	69ba      	ldr	r2, [r7, #24]
 800083a:	69fb      	ldr	r3, [r7, #28]
 800083c:	429a      	cmp	r2, r3
 800083e:	f040 8158 	bne.w	8000af2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	4a9a      	ldr	r2, [pc, #616]	@ (8000ab0 <HAL_GPIO_Init+0x2a0>)
 8000848:	4293      	cmp	r3, r2
 800084a:	d05e      	beq.n	800090a <HAL_GPIO_Init+0xfa>
 800084c:	4a98      	ldr	r2, [pc, #608]	@ (8000ab0 <HAL_GPIO_Init+0x2a0>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d875      	bhi.n	800093e <HAL_GPIO_Init+0x12e>
 8000852:	4a98      	ldr	r2, [pc, #608]	@ (8000ab4 <HAL_GPIO_Init+0x2a4>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d058      	beq.n	800090a <HAL_GPIO_Init+0xfa>
 8000858:	4a96      	ldr	r2, [pc, #600]	@ (8000ab4 <HAL_GPIO_Init+0x2a4>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d86f      	bhi.n	800093e <HAL_GPIO_Init+0x12e>
 800085e:	4a96      	ldr	r2, [pc, #600]	@ (8000ab8 <HAL_GPIO_Init+0x2a8>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d052      	beq.n	800090a <HAL_GPIO_Init+0xfa>
 8000864:	4a94      	ldr	r2, [pc, #592]	@ (8000ab8 <HAL_GPIO_Init+0x2a8>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d869      	bhi.n	800093e <HAL_GPIO_Init+0x12e>
 800086a:	4a94      	ldr	r2, [pc, #592]	@ (8000abc <HAL_GPIO_Init+0x2ac>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d04c      	beq.n	800090a <HAL_GPIO_Init+0xfa>
 8000870:	4a92      	ldr	r2, [pc, #584]	@ (8000abc <HAL_GPIO_Init+0x2ac>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d863      	bhi.n	800093e <HAL_GPIO_Init+0x12e>
 8000876:	4a92      	ldr	r2, [pc, #584]	@ (8000ac0 <HAL_GPIO_Init+0x2b0>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d046      	beq.n	800090a <HAL_GPIO_Init+0xfa>
 800087c:	4a90      	ldr	r2, [pc, #576]	@ (8000ac0 <HAL_GPIO_Init+0x2b0>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d85d      	bhi.n	800093e <HAL_GPIO_Init+0x12e>
 8000882:	2b12      	cmp	r3, #18
 8000884:	d82a      	bhi.n	80008dc <HAL_GPIO_Init+0xcc>
 8000886:	2b12      	cmp	r3, #18
 8000888:	d859      	bhi.n	800093e <HAL_GPIO_Init+0x12e>
 800088a:	a201      	add	r2, pc, #4	@ (adr r2, 8000890 <HAL_GPIO_Init+0x80>)
 800088c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000890:	0800090b 	.word	0x0800090b
 8000894:	080008e5 	.word	0x080008e5
 8000898:	080008f7 	.word	0x080008f7
 800089c:	08000939 	.word	0x08000939
 80008a0:	0800093f 	.word	0x0800093f
 80008a4:	0800093f 	.word	0x0800093f
 80008a8:	0800093f 	.word	0x0800093f
 80008ac:	0800093f 	.word	0x0800093f
 80008b0:	0800093f 	.word	0x0800093f
 80008b4:	0800093f 	.word	0x0800093f
 80008b8:	0800093f 	.word	0x0800093f
 80008bc:	0800093f 	.word	0x0800093f
 80008c0:	0800093f 	.word	0x0800093f
 80008c4:	0800093f 	.word	0x0800093f
 80008c8:	0800093f 	.word	0x0800093f
 80008cc:	0800093f 	.word	0x0800093f
 80008d0:	0800093f 	.word	0x0800093f
 80008d4:	080008ed 	.word	0x080008ed
 80008d8:	08000901 	.word	0x08000901
 80008dc:	4a79      	ldr	r2, [pc, #484]	@ (8000ac4 <HAL_GPIO_Init+0x2b4>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d013      	beq.n	800090a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80008e2:	e02c      	b.n	800093e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	68db      	ldr	r3, [r3, #12]
 80008e8:	623b      	str	r3, [r7, #32]
          break;
 80008ea:	e029      	b.n	8000940 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	68db      	ldr	r3, [r3, #12]
 80008f0:	3304      	adds	r3, #4
 80008f2:	623b      	str	r3, [r7, #32]
          break;
 80008f4:	e024      	b.n	8000940 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	68db      	ldr	r3, [r3, #12]
 80008fa:	3308      	adds	r3, #8
 80008fc:	623b      	str	r3, [r7, #32]
          break;
 80008fe:	e01f      	b.n	8000940 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	68db      	ldr	r3, [r3, #12]
 8000904:	330c      	adds	r3, #12
 8000906:	623b      	str	r3, [r7, #32]
          break;
 8000908:	e01a      	b.n	8000940 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	689b      	ldr	r3, [r3, #8]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d102      	bne.n	8000918 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000912:	2304      	movs	r3, #4
 8000914:	623b      	str	r3, [r7, #32]
          break;
 8000916:	e013      	b.n	8000940 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	689b      	ldr	r3, [r3, #8]
 800091c:	2b01      	cmp	r3, #1
 800091e:	d105      	bne.n	800092c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000920:	2308      	movs	r3, #8
 8000922:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	69fa      	ldr	r2, [r7, #28]
 8000928:	611a      	str	r2, [r3, #16]
          break;
 800092a:	e009      	b.n	8000940 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800092c:	2308      	movs	r3, #8
 800092e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	69fa      	ldr	r2, [r7, #28]
 8000934:	615a      	str	r2, [r3, #20]
          break;
 8000936:	e003      	b.n	8000940 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000938:	2300      	movs	r3, #0
 800093a:	623b      	str	r3, [r7, #32]
          break;
 800093c:	e000      	b.n	8000940 <HAL_GPIO_Init+0x130>
          break;
 800093e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000940:	69bb      	ldr	r3, [r7, #24]
 8000942:	2bff      	cmp	r3, #255	@ 0xff
 8000944:	d801      	bhi.n	800094a <HAL_GPIO_Init+0x13a>
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	e001      	b.n	800094e <HAL_GPIO_Init+0x13e>
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	3304      	adds	r3, #4
 800094e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000950:	69bb      	ldr	r3, [r7, #24]
 8000952:	2bff      	cmp	r3, #255	@ 0xff
 8000954:	d802      	bhi.n	800095c <HAL_GPIO_Init+0x14c>
 8000956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	e002      	b.n	8000962 <HAL_GPIO_Init+0x152>
 800095c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800095e:	3b08      	subs	r3, #8
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	210f      	movs	r1, #15
 800096a:	693b      	ldr	r3, [r7, #16]
 800096c:	fa01 f303 	lsl.w	r3, r1, r3
 8000970:	43db      	mvns	r3, r3
 8000972:	401a      	ands	r2, r3
 8000974:	6a39      	ldr	r1, [r7, #32]
 8000976:	693b      	ldr	r3, [r7, #16]
 8000978:	fa01 f303 	lsl.w	r3, r1, r3
 800097c:	431a      	orrs	r2, r3
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	685b      	ldr	r3, [r3, #4]
 8000986:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800098a:	2b00      	cmp	r3, #0
 800098c:	f000 80b1 	beq.w	8000af2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000990:	4b4d      	ldr	r3, [pc, #308]	@ (8000ac8 <HAL_GPIO_Init+0x2b8>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	4a4c      	ldr	r2, [pc, #304]	@ (8000ac8 <HAL_GPIO_Init+0x2b8>)
 8000996:	f043 0301 	orr.w	r3, r3, #1
 800099a:	6193      	str	r3, [r2, #24]
 800099c:	4b4a      	ldr	r3, [pc, #296]	@ (8000ac8 <HAL_GPIO_Init+0x2b8>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	f003 0301 	and.w	r3, r3, #1
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009a8:	4a48      	ldr	r2, [pc, #288]	@ (8000acc <HAL_GPIO_Init+0x2bc>)
 80009aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009ac:	089b      	lsrs	r3, r3, #2
 80009ae:	3302      	adds	r3, #2
 80009b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009b8:	f003 0303 	and.w	r3, r3, #3
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	220f      	movs	r2, #15
 80009c0:	fa02 f303 	lsl.w	r3, r2, r3
 80009c4:	43db      	mvns	r3, r3
 80009c6:	68fa      	ldr	r2, [r7, #12]
 80009c8:	4013      	ands	r3, r2
 80009ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	4a40      	ldr	r2, [pc, #256]	@ (8000ad0 <HAL_GPIO_Init+0x2c0>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d013      	beq.n	80009fc <HAL_GPIO_Init+0x1ec>
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	4a3f      	ldr	r2, [pc, #252]	@ (8000ad4 <HAL_GPIO_Init+0x2c4>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d00d      	beq.n	80009f8 <HAL_GPIO_Init+0x1e8>
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	4a3e      	ldr	r2, [pc, #248]	@ (8000ad8 <HAL_GPIO_Init+0x2c8>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d007      	beq.n	80009f4 <HAL_GPIO_Init+0x1e4>
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	4a3d      	ldr	r2, [pc, #244]	@ (8000adc <HAL_GPIO_Init+0x2cc>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d101      	bne.n	80009f0 <HAL_GPIO_Init+0x1e0>
 80009ec:	2303      	movs	r3, #3
 80009ee:	e006      	b.n	80009fe <HAL_GPIO_Init+0x1ee>
 80009f0:	2304      	movs	r3, #4
 80009f2:	e004      	b.n	80009fe <HAL_GPIO_Init+0x1ee>
 80009f4:	2302      	movs	r3, #2
 80009f6:	e002      	b.n	80009fe <HAL_GPIO_Init+0x1ee>
 80009f8:	2301      	movs	r3, #1
 80009fa:	e000      	b.n	80009fe <HAL_GPIO_Init+0x1ee>
 80009fc:	2300      	movs	r3, #0
 80009fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a00:	f002 0203 	and.w	r2, r2, #3
 8000a04:	0092      	lsls	r2, r2, #2
 8000a06:	4093      	lsls	r3, r2
 8000a08:	68fa      	ldr	r2, [r7, #12]
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a0e:	492f      	ldr	r1, [pc, #188]	@ (8000acc <HAL_GPIO_Init+0x2bc>)
 8000a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a12:	089b      	lsrs	r3, r3, #2
 8000a14:	3302      	adds	r3, #2
 8000a16:	68fa      	ldr	r2, [r7, #12]
 8000a18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d006      	beq.n	8000a36 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a28:	4b2d      	ldr	r3, [pc, #180]	@ (8000ae0 <HAL_GPIO_Init+0x2d0>)
 8000a2a:	689a      	ldr	r2, [r3, #8]
 8000a2c:	492c      	ldr	r1, [pc, #176]	@ (8000ae0 <HAL_GPIO_Init+0x2d0>)
 8000a2e:	69bb      	ldr	r3, [r7, #24]
 8000a30:	4313      	orrs	r3, r2
 8000a32:	608b      	str	r3, [r1, #8]
 8000a34:	e006      	b.n	8000a44 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a36:	4b2a      	ldr	r3, [pc, #168]	@ (8000ae0 <HAL_GPIO_Init+0x2d0>)
 8000a38:	689a      	ldr	r2, [r3, #8]
 8000a3a:	69bb      	ldr	r3, [r7, #24]
 8000a3c:	43db      	mvns	r3, r3
 8000a3e:	4928      	ldr	r1, [pc, #160]	@ (8000ae0 <HAL_GPIO_Init+0x2d0>)
 8000a40:	4013      	ands	r3, r2
 8000a42:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d006      	beq.n	8000a5e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a50:	4b23      	ldr	r3, [pc, #140]	@ (8000ae0 <HAL_GPIO_Init+0x2d0>)
 8000a52:	68da      	ldr	r2, [r3, #12]
 8000a54:	4922      	ldr	r1, [pc, #136]	@ (8000ae0 <HAL_GPIO_Init+0x2d0>)
 8000a56:	69bb      	ldr	r3, [r7, #24]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	60cb      	str	r3, [r1, #12]
 8000a5c:	e006      	b.n	8000a6c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a5e:	4b20      	ldr	r3, [pc, #128]	@ (8000ae0 <HAL_GPIO_Init+0x2d0>)
 8000a60:	68da      	ldr	r2, [r3, #12]
 8000a62:	69bb      	ldr	r3, [r7, #24]
 8000a64:	43db      	mvns	r3, r3
 8000a66:	491e      	ldr	r1, [pc, #120]	@ (8000ae0 <HAL_GPIO_Init+0x2d0>)
 8000a68:	4013      	ands	r3, r2
 8000a6a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d006      	beq.n	8000a86 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a78:	4b19      	ldr	r3, [pc, #100]	@ (8000ae0 <HAL_GPIO_Init+0x2d0>)
 8000a7a:	685a      	ldr	r2, [r3, #4]
 8000a7c:	4918      	ldr	r1, [pc, #96]	@ (8000ae0 <HAL_GPIO_Init+0x2d0>)
 8000a7e:	69bb      	ldr	r3, [r7, #24]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	604b      	str	r3, [r1, #4]
 8000a84:	e006      	b.n	8000a94 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a86:	4b16      	ldr	r3, [pc, #88]	@ (8000ae0 <HAL_GPIO_Init+0x2d0>)
 8000a88:	685a      	ldr	r2, [r3, #4]
 8000a8a:	69bb      	ldr	r3, [r7, #24]
 8000a8c:	43db      	mvns	r3, r3
 8000a8e:	4914      	ldr	r1, [pc, #80]	@ (8000ae0 <HAL_GPIO_Init+0x2d0>)
 8000a90:	4013      	ands	r3, r2
 8000a92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d021      	beq.n	8000ae4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae0 <HAL_GPIO_Init+0x2d0>)
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	490e      	ldr	r1, [pc, #56]	@ (8000ae0 <HAL_GPIO_Init+0x2d0>)
 8000aa6:	69bb      	ldr	r3, [r7, #24]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	600b      	str	r3, [r1, #0]
 8000aac:	e021      	b.n	8000af2 <HAL_GPIO_Init+0x2e2>
 8000aae:	bf00      	nop
 8000ab0:	10320000 	.word	0x10320000
 8000ab4:	10310000 	.word	0x10310000
 8000ab8:	10220000 	.word	0x10220000
 8000abc:	10210000 	.word	0x10210000
 8000ac0:	10120000 	.word	0x10120000
 8000ac4:	10110000 	.word	0x10110000
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	40010000 	.word	0x40010000
 8000ad0:	40010800 	.word	0x40010800
 8000ad4:	40010c00 	.word	0x40010c00
 8000ad8:	40011000 	.word	0x40011000
 8000adc:	40011400 	.word	0x40011400
 8000ae0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8000b14 <HAL_GPIO_Init+0x304>)
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	69bb      	ldr	r3, [r7, #24]
 8000aea:	43db      	mvns	r3, r3
 8000aec:	4909      	ldr	r1, [pc, #36]	@ (8000b14 <HAL_GPIO_Init+0x304>)
 8000aee:	4013      	ands	r3, r2
 8000af0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000af4:	3301      	adds	r3, #1
 8000af6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000afe:	fa22 f303 	lsr.w	r3, r2, r3
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	f47f ae8e 	bne.w	8000824 <HAL_GPIO_Init+0x14>
  }
}
 8000b08:	bf00      	nop
 8000b0a:	bf00      	nop
 8000b0c:	372c      	adds	r7, #44	@ 0x2c
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bc80      	pop	{r7}
 8000b12:	4770      	bx	lr
 8000b14:	40010400 	.word	0x40010400

08000b18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	460b      	mov	r3, r1
 8000b22:	807b      	strh	r3, [r7, #2]
 8000b24:	4613      	mov	r3, r2
 8000b26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b28:	787b      	ldrb	r3, [r7, #1]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d003      	beq.n	8000b36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b2e:	887a      	ldrh	r2, [r7, #2]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b34:	e003      	b.n	8000b3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b36:	887b      	ldrh	r3, [r7, #2]
 8000b38:	041a      	lsls	r2, r3, #16
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	611a      	str	r2, [r3, #16]
}
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bc80      	pop	{r7}
 8000b46:	4770      	bx	lr

08000b48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000b52:	4b08      	ldr	r3, [pc, #32]	@ (8000b74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b54:	695a      	ldr	r2, [r3, #20]
 8000b56:	88fb      	ldrh	r3, [r7, #6]
 8000b58:	4013      	ands	r3, r2
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d006      	beq.n	8000b6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000b5e:	4a05      	ldr	r2, [pc, #20]	@ (8000b74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b60:	88fb      	ldrh	r3, [r7, #6]
 8000b62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000b64:	88fb      	ldrh	r3, [r7, #6]
 8000b66:	4618      	mov	r0, r3
 8000b68:	f000 fd14 	bl	8001594 <HAL_GPIO_EXTI_Callback>
  }
}
 8000b6c:	bf00      	nop
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40010400 	.word	0x40010400

08000b78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d101      	bne.n	8000b8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
 8000b88:	e272      	b.n	8001070 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	f000 8087 	beq.w	8000ca6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b98:	4b92      	ldr	r3, [pc, #584]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	f003 030c 	and.w	r3, r3, #12
 8000ba0:	2b04      	cmp	r3, #4
 8000ba2:	d00c      	beq.n	8000bbe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ba4:	4b8f      	ldr	r3, [pc, #572]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	f003 030c 	and.w	r3, r3, #12
 8000bac:	2b08      	cmp	r3, #8
 8000bae:	d112      	bne.n	8000bd6 <HAL_RCC_OscConfig+0x5e>
 8000bb0:	4b8c      	ldr	r3, [pc, #560]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000bb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000bbc:	d10b      	bne.n	8000bd6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bbe:	4b89      	ldr	r3, [pc, #548]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d06c      	beq.n	8000ca4 <HAL_RCC_OscConfig+0x12c>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d168      	bne.n	8000ca4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e24c      	b.n	8001070 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000bde:	d106      	bne.n	8000bee <HAL_RCC_OscConfig+0x76>
 8000be0:	4b80      	ldr	r3, [pc, #512]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a7f      	ldr	r2, [pc, #508]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000be6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000bea:	6013      	str	r3, [r2, #0]
 8000bec:	e02e      	b.n	8000c4c <HAL_RCC_OscConfig+0xd4>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d10c      	bne.n	8000c10 <HAL_RCC_OscConfig+0x98>
 8000bf6:	4b7b      	ldr	r3, [pc, #492]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a7a      	ldr	r2, [pc, #488]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000bfc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c00:	6013      	str	r3, [r2, #0]
 8000c02:	4b78      	ldr	r3, [pc, #480]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a77      	ldr	r2, [pc, #476]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000c08:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c0c:	6013      	str	r3, [r2, #0]
 8000c0e:	e01d      	b.n	8000c4c <HAL_RCC_OscConfig+0xd4>
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000c18:	d10c      	bne.n	8000c34 <HAL_RCC_OscConfig+0xbc>
 8000c1a:	4b72      	ldr	r3, [pc, #456]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a71      	ldr	r2, [pc, #452]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000c20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c24:	6013      	str	r3, [r2, #0]
 8000c26:	4b6f      	ldr	r3, [pc, #444]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a6e      	ldr	r2, [pc, #440]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000c2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c30:	6013      	str	r3, [r2, #0]
 8000c32:	e00b      	b.n	8000c4c <HAL_RCC_OscConfig+0xd4>
 8000c34:	4b6b      	ldr	r3, [pc, #428]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a6a      	ldr	r2, [pc, #424]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000c3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c3e:	6013      	str	r3, [r2, #0]
 8000c40:	4b68      	ldr	r3, [pc, #416]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a67      	ldr	r2, [pc, #412]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000c46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c4a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d013      	beq.n	8000c7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c54:	f7ff fcc4 	bl	80005e0 <HAL_GetTick>
 8000c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c5a:	e008      	b.n	8000c6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c5c:	f7ff fcc0 	bl	80005e0 <HAL_GetTick>
 8000c60:	4602      	mov	r2, r0
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	2b64      	cmp	r3, #100	@ 0x64
 8000c68:	d901      	bls.n	8000c6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	e200      	b.n	8001070 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c6e:	4b5d      	ldr	r3, [pc, #372]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d0f0      	beq.n	8000c5c <HAL_RCC_OscConfig+0xe4>
 8000c7a:	e014      	b.n	8000ca6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c7c:	f7ff fcb0 	bl	80005e0 <HAL_GetTick>
 8000c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c82:	e008      	b.n	8000c96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c84:	f7ff fcac 	bl	80005e0 <HAL_GetTick>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	693b      	ldr	r3, [r7, #16]
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	2b64      	cmp	r3, #100	@ 0x64
 8000c90:	d901      	bls.n	8000c96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000c92:	2303      	movs	r3, #3
 8000c94:	e1ec      	b.n	8001070 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c96:	4b53      	ldr	r3, [pc, #332]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d1f0      	bne.n	8000c84 <HAL_RCC_OscConfig+0x10c>
 8000ca2:	e000      	b.n	8000ca6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ca4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f003 0302 	and.w	r3, r3, #2
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d063      	beq.n	8000d7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cb2:	4b4c      	ldr	r3, [pc, #304]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	f003 030c 	and.w	r3, r3, #12
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d00b      	beq.n	8000cd6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000cbe:	4b49      	ldr	r3, [pc, #292]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	f003 030c 	and.w	r3, r3, #12
 8000cc6:	2b08      	cmp	r3, #8
 8000cc8:	d11c      	bne.n	8000d04 <HAL_RCC_OscConfig+0x18c>
 8000cca:	4b46      	ldr	r3, [pc, #280]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d116      	bne.n	8000d04 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cd6:	4b43      	ldr	r3, [pc, #268]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f003 0302 	and.w	r3, r3, #2
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d005      	beq.n	8000cee <HAL_RCC_OscConfig+0x176>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	691b      	ldr	r3, [r3, #16]
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d001      	beq.n	8000cee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e1c0      	b.n	8001070 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cee:	4b3d      	ldr	r3, [pc, #244]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	695b      	ldr	r3, [r3, #20]
 8000cfa:	00db      	lsls	r3, r3, #3
 8000cfc:	4939      	ldr	r1, [pc, #228]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d02:	e03a      	b.n	8000d7a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	691b      	ldr	r3, [r3, #16]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d020      	beq.n	8000d4e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d0c:	4b36      	ldr	r3, [pc, #216]	@ (8000de8 <HAL_RCC_OscConfig+0x270>)
 8000d0e:	2201      	movs	r2, #1
 8000d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d12:	f7ff fc65 	bl	80005e0 <HAL_GetTick>
 8000d16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d18:	e008      	b.n	8000d2c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d1a:	f7ff fc61 	bl	80005e0 <HAL_GetTick>
 8000d1e:	4602      	mov	r2, r0
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	1ad3      	subs	r3, r2, r3
 8000d24:	2b02      	cmp	r3, #2
 8000d26:	d901      	bls.n	8000d2c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	e1a1      	b.n	8001070 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d2c:	4b2d      	ldr	r3, [pc, #180]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f003 0302 	and.w	r3, r3, #2
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d0f0      	beq.n	8000d1a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d38:	4b2a      	ldr	r3, [pc, #168]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	695b      	ldr	r3, [r3, #20]
 8000d44:	00db      	lsls	r3, r3, #3
 8000d46:	4927      	ldr	r1, [pc, #156]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	600b      	str	r3, [r1, #0]
 8000d4c:	e015      	b.n	8000d7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d4e:	4b26      	ldr	r3, [pc, #152]	@ (8000de8 <HAL_RCC_OscConfig+0x270>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d54:	f7ff fc44 	bl	80005e0 <HAL_GetTick>
 8000d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d5a:	e008      	b.n	8000d6e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d5c:	f7ff fc40 	bl	80005e0 <HAL_GetTick>
 8000d60:	4602      	mov	r2, r0
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d901      	bls.n	8000d6e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	e180      	b.n	8001070 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d6e:	4b1d      	ldr	r3, [pc, #116]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d1f0      	bne.n	8000d5c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f003 0308 	and.w	r3, r3, #8
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d03a      	beq.n	8000dfc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	699b      	ldr	r3, [r3, #24]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d019      	beq.n	8000dc2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d8e:	4b17      	ldr	r3, [pc, #92]	@ (8000dec <HAL_RCC_OscConfig+0x274>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d94:	f7ff fc24 	bl	80005e0 <HAL_GetTick>
 8000d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d9a:	e008      	b.n	8000dae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d9c:	f7ff fc20 	bl	80005e0 <HAL_GetTick>
 8000da0:	4602      	mov	r2, r0
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d901      	bls.n	8000dae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000daa:	2303      	movs	r3, #3
 8000dac:	e160      	b.n	8001070 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dae:	4b0d      	ldr	r3, [pc, #52]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000db2:	f003 0302 	and.w	r3, r3, #2
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d0f0      	beq.n	8000d9c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000dba:	2001      	movs	r0, #1
 8000dbc:	f000 face 	bl	800135c <RCC_Delay>
 8000dc0:	e01c      	b.n	8000dfc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8000dec <HAL_RCC_OscConfig+0x274>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dc8:	f7ff fc0a 	bl	80005e0 <HAL_GetTick>
 8000dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dce:	e00f      	b.n	8000df0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000dd0:	f7ff fc06 	bl	80005e0 <HAL_GetTick>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	2b02      	cmp	r3, #2
 8000ddc:	d908      	bls.n	8000df0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000dde:	2303      	movs	r3, #3
 8000de0:	e146      	b.n	8001070 <HAL_RCC_OscConfig+0x4f8>
 8000de2:	bf00      	nop
 8000de4:	40021000 	.word	0x40021000
 8000de8:	42420000 	.word	0x42420000
 8000dec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000df0:	4b92      	ldr	r3, [pc, #584]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000df4:	f003 0302 	and.w	r3, r3, #2
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d1e9      	bne.n	8000dd0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f003 0304 	and.w	r3, r3, #4
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	f000 80a6 	beq.w	8000f56 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e0e:	4b8b      	ldr	r3, [pc, #556]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000e10:	69db      	ldr	r3, [r3, #28]
 8000e12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d10d      	bne.n	8000e36 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e1a:	4b88      	ldr	r3, [pc, #544]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000e1c:	69db      	ldr	r3, [r3, #28]
 8000e1e:	4a87      	ldr	r2, [pc, #540]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000e20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e24:	61d3      	str	r3, [r2, #28]
 8000e26:	4b85      	ldr	r3, [pc, #532]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000e28:	69db      	ldr	r3, [r3, #28]
 8000e2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e32:	2301      	movs	r3, #1
 8000e34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e36:	4b82      	ldr	r3, [pc, #520]	@ (8001040 <HAL_RCC_OscConfig+0x4c8>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d118      	bne.n	8000e74 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e42:	4b7f      	ldr	r3, [pc, #508]	@ (8001040 <HAL_RCC_OscConfig+0x4c8>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a7e      	ldr	r2, [pc, #504]	@ (8001040 <HAL_RCC_OscConfig+0x4c8>)
 8000e48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e4e:	f7ff fbc7 	bl	80005e0 <HAL_GetTick>
 8000e52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e54:	e008      	b.n	8000e68 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e56:	f7ff fbc3 	bl	80005e0 <HAL_GetTick>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	2b64      	cmp	r3, #100	@ 0x64
 8000e62:	d901      	bls.n	8000e68 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e64:	2303      	movs	r3, #3
 8000e66:	e103      	b.n	8001070 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e68:	4b75      	ldr	r3, [pc, #468]	@ (8001040 <HAL_RCC_OscConfig+0x4c8>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d0f0      	beq.n	8000e56 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d106      	bne.n	8000e8a <HAL_RCC_OscConfig+0x312>
 8000e7c:	4b6f      	ldr	r3, [pc, #444]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000e7e:	6a1b      	ldr	r3, [r3, #32]
 8000e80:	4a6e      	ldr	r2, [pc, #440]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000e82:	f043 0301 	orr.w	r3, r3, #1
 8000e86:	6213      	str	r3, [r2, #32]
 8000e88:	e02d      	b.n	8000ee6 <HAL_RCC_OscConfig+0x36e>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	68db      	ldr	r3, [r3, #12]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d10c      	bne.n	8000eac <HAL_RCC_OscConfig+0x334>
 8000e92:	4b6a      	ldr	r3, [pc, #424]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000e94:	6a1b      	ldr	r3, [r3, #32]
 8000e96:	4a69      	ldr	r2, [pc, #420]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000e98:	f023 0301 	bic.w	r3, r3, #1
 8000e9c:	6213      	str	r3, [r2, #32]
 8000e9e:	4b67      	ldr	r3, [pc, #412]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000ea0:	6a1b      	ldr	r3, [r3, #32]
 8000ea2:	4a66      	ldr	r2, [pc, #408]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000ea4:	f023 0304 	bic.w	r3, r3, #4
 8000ea8:	6213      	str	r3, [r2, #32]
 8000eaa:	e01c      	b.n	8000ee6 <HAL_RCC_OscConfig+0x36e>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	2b05      	cmp	r3, #5
 8000eb2:	d10c      	bne.n	8000ece <HAL_RCC_OscConfig+0x356>
 8000eb4:	4b61      	ldr	r3, [pc, #388]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000eb6:	6a1b      	ldr	r3, [r3, #32]
 8000eb8:	4a60      	ldr	r2, [pc, #384]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000eba:	f043 0304 	orr.w	r3, r3, #4
 8000ebe:	6213      	str	r3, [r2, #32]
 8000ec0:	4b5e      	ldr	r3, [pc, #376]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000ec2:	6a1b      	ldr	r3, [r3, #32]
 8000ec4:	4a5d      	ldr	r2, [pc, #372]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000ec6:	f043 0301 	orr.w	r3, r3, #1
 8000eca:	6213      	str	r3, [r2, #32]
 8000ecc:	e00b      	b.n	8000ee6 <HAL_RCC_OscConfig+0x36e>
 8000ece:	4b5b      	ldr	r3, [pc, #364]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000ed0:	6a1b      	ldr	r3, [r3, #32]
 8000ed2:	4a5a      	ldr	r2, [pc, #360]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000ed4:	f023 0301 	bic.w	r3, r3, #1
 8000ed8:	6213      	str	r3, [r2, #32]
 8000eda:	4b58      	ldr	r3, [pc, #352]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000edc:	6a1b      	ldr	r3, [r3, #32]
 8000ede:	4a57      	ldr	r2, [pc, #348]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000ee0:	f023 0304 	bic.w	r3, r3, #4
 8000ee4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	68db      	ldr	r3, [r3, #12]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d015      	beq.n	8000f1a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eee:	f7ff fb77 	bl	80005e0 <HAL_GetTick>
 8000ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ef4:	e00a      	b.n	8000f0c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ef6:	f7ff fb73 	bl	80005e0 <HAL_GetTick>
 8000efa:	4602      	mov	r2, r0
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	1ad3      	subs	r3, r2, r3
 8000f00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d901      	bls.n	8000f0c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	e0b1      	b.n	8001070 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f0c:	4b4b      	ldr	r3, [pc, #300]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000f0e:	6a1b      	ldr	r3, [r3, #32]
 8000f10:	f003 0302 	and.w	r3, r3, #2
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d0ee      	beq.n	8000ef6 <HAL_RCC_OscConfig+0x37e>
 8000f18:	e014      	b.n	8000f44 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f1a:	f7ff fb61 	bl	80005e0 <HAL_GetTick>
 8000f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f20:	e00a      	b.n	8000f38 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f22:	f7ff fb5d 	bl	80005e0 <HAL_GetTick>
 8000f26:	4602      	mov	r2, r0
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d901      	bls.n	8000f38 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f34:	2303      	movs	r3, #3
 8000f36:	e09b      	b.n	8001070 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f38:	4b40      	ldr	r3, [pc, #256]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000f3a:	6a1b      	ldr	r3, [r3, #32]
 8000f3c:	f003 0302 	and.w	r3, r3, #2
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d1ee      	bne.n	8000f22 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f44:	7dfb      	ldrb	r3, [r7, #23]
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d105      	bne.n	8000f56 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f4a:	4b3c      	ldr	r3, [pc, #240]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000f4c:	69db      	ldr	r3, [r3, #28]
 8000f4e:	4a3b      	ldr	r2, [pc, #236]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000f50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000f54:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	69db      	ldr	r3, [r3, #28]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	f000 8087 	beq.w	800106e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f60:	4b36      	ldr	r3, [pc, #216]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f003 030c 	and.w	r3, r3, #12
 8000f68:	2b08      	cmp	r3, #8
 8000f6a:	d061      	beq.n	8001030 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	69db      	ldr	r3, [r3, #28]
 8000f70:	2b02      	cmp	r3, #2
 8000f72:	d146      	bne.n	8001002 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f74:	4b33      	ldr	r3, [pc, #204]	@ (8001044 <HAL_RCC_OscConfig+0x4cc>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f7a:	f7ff fb31 	bl	80005e0 <HAL_GetTick>
 8000f7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f80:	e008      	b.n	8000f94 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f82:	f7ff fb2d 	bl	80005e0 <HAL_GetTick>
 8000f86:	4602      	mov	r2, r0
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d901      	bls.n	8000f94 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000f90:	2303      	movs	r3, #3
 8000f92:	e06d      	b.n	8001070 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f94:	4b29      	ldr	r3, [pc, #164]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d1f0      	bne.n	8000f82 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6a1b      	ldr	r3, [r3, #32]
 8000fa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fa8:	d108      	bne.n	8000fbc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000faa:	4b24      	ldr	r3, [pc, #144]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	4921      	ldr	r1, [pc, #132]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fbc:	4b1f      	ldr	r3, [pc, #124]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6a19      	ldr	r1, [r3, #32]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fcc:	430b      	orrs	r3, r1
 8000fce:	491b      	ldr	r1, [pc, #108]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fd4:	4b1b      	ldr	r3, [pc, #108]	@ (8001044 <HAL_RCC_OscConfig+0x4cc>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fda:	f7ff fb01 	bl	80005e0 <HAL_GetTick>
 8000fde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fe0:	e008      	b.n	8000ff4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fe2:	f7ff fafd 	bl	80005e0 <HAL_GetTick>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d901      	bls.n	8000ff4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	e03d      	b.n	8001070 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ff4:	4b11      	ldr	r3, [pc, #68]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d0f0      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x46a>
 8001000:	e035      	b.n	800106e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001002:	4b10      	ldr	r3, [pc, #64]	@ (8001044 <HAL_RCC_OscConfig+0x4cc>)
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001008:	f7ff faea 	bl	80005e0 <HAL_GetTick>
 800100c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800100e:	e008      	b.n	8001022 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001010:	f7ff fae6 	bl	80005e0 <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	2b02      	cmp	r3, #2
 800101c:	d901      	bls.n	8001022 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800101e:	2303      	movs	r3, #3
 8001020:	e026      	b.n	8001070 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001022:	4b06      	ldr	r3, [pc, #24]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d1f0      	bne.n	8001010 <HAL_RCC_OscConfig+0x498>
 800102e:	e01e      	b.n	800106e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	69db      	ldr	r3, [r3, #28]
 8001034:	2b01      	cmp	r3, #1
 8001036:	d107      	bne.n	8001048 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	e019      	b.n	8001070 <HAL_RCC_OscConfig+0x4f8>
 800103c:	40021000 	.word	0x40021000
 8001040:	40007000 	.word	0x40007000
 8001044:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001048:	4b0b      	ldr	r3, [pc, #44]	@ (8001078 <HAL_RCC_OscConfig+0x500>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6a1b      	ldr	r3, [r3, #32]
 8001058:	429a      	cmp	r2, r3
 800105a:	d106      	bne.n	800106a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001066:	429a      	cmp	r2, r3
 8001068:	d001      	beq.n	800106e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e000      	b.n	8001070 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800106e:	2300      	movs	r3, #0
}
 8001070:	4618      	mov	r0, r3
 8001072:	3718      	adds	r7, #24
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40021000 	.word	0x40021000

0800107c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d101      	bne.n	8001090 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	e0d0      	b.n	8001232 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001090:	4b6a      	ldr	r3, [pc, #424]	@ (800123c <HAL_RCC_ClockConfig+0x1c0>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f003 0307 	and.w	r3, r3, #7
 8001098:	683a      	ldr	r2, [r7, #0]
 800109a:	429a      	cmp	r2, r3
 800109c:	d910      	bls.n	80010c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800109e:	4b67      	ldr	r3, [pc, #412]	@ (800123c <HAL_RCC_ClockConfig+0x1c0>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f023 0207 	bic.w	r2, r3, #7
 80010a6:	4965      	ldr	r1, [pc, #404]	@ (800123c <HAL_RCC_ClockConfig+0x1c0>)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010ae:	4b63      	ldr	r3, [pc, #396]	@ (800123c <HAL_RCC_ClockConfig+0x1c0>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	683a      	ldr	r2, [r7, #0]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d001      	beq.n	80010c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	e0b8      	b.n	8001232 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 0302 	and.w	r3, r3, #2
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d020      	beq.n	800110e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 0304 	and.w	r3, r3, #4
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d005      	beq.n	80010e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010d8:	4b59      	ldr	r3, [pc, #356]	@ (8001240 <HAL_RCC_ClockConfig+0x1c4>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	4a58      	ldr	r2, [pc, #352]	@ (8001240 <HAL_RCC_ClockConfig+0x1c4>)
 80010de:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80010e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 0308 	and.w	r3, r3, #8
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d005      	beq.n	80010fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010f0:	4b53      	ldr	r3, [pc, #332]	@ (8001240 <HAL_RCC_ClockConfig+0x1c4>)
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	4a52      	ldr	r2, [pc, #328]	@ (8001240 <HAL_RCC_ClockConfig+0x1c4>)
 80010f6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80010fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010fc:	4b50      	ldr	r3, [pc, #320]	@ (8001240 <HAL_RCC_ClockConfig+0x1c4>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	494d      	ldr	r1, [pc, #308]	@ (8001240 <HAL_RCC_ClockConfig+0x1c4>)
 800110a:	4313      	orrs	r3, r2
 800110c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	2b00      	cmp	r3, #0
 8001118:	d040      	beq.n	800119c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d107      	bne.n	8001132 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001122:	4b47      	ldr	r3, [pc, #284]	@ (8001240 <HAL_RCC_ClockConfig+0x1c4>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d115      	bne.n	800115a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e07f      	b.n	8001232 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	2b02      	cmp	r3, #2
 8001138:	d107      	bne.n	800114a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800113a:	4b41      	ldr	r3, [pc, #260]	@ (8001240 <HAL_RCC_ClockConfig+0x1c4>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d109      	bne.n	800115a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e073      	b.n	8001232 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800114a:	4b3d      	ldr	r3, [pc, #244]	@ (8001240 <HAL_RCC_ClockConfig+0x1c4>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0302 	and.w	r3, r3, #2
 8001152:	2b00      	cmp	r3, #0
 8001154:	d101      	bne.n	800115a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e06b      	b.n	8001232 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800115a:	4b39      	ldr	r3, [pc, #228]	@ (8001240 <HAL_RCC_ClockConfig+0x1c4>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f023 0203 	bic.w	r2, r3, #3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	4936      	ldr	r1, [pc, #216]	@ (8001240 <HAL_RCC_ClockConfig+0x1c4>)
 8001168:	4313      	orrs	r3, r2
 800116a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800116c:	f7ff fa38 	bl	80005e0 <HAL_GetTick>
 8001170:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001172:	e00a      	b.n	800118a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001174:	f7ff fa34 	bl	80005e0 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001182:	4293      	cmp	r3, r2
 8001184:	d901      	bls.n	800118a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001186:	2303      	movs	r3, #3
 8001188:	e053      	b.n	8001232 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800118a:	4b2d      	ldr	r3, [pc, #180]	@ (8001240 <HAL_RCC_ClockConfig+0x1c4>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f003 020c 	and.w	r2, r3, #12
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	429a      	cmp	r2, r3
 800119a:	d1eb      	bne.n	8001174 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800119c:	4b27      	ldr	r3, [pc, #156]	@ (800123c <HAL_RCC_ClockConfig+0x1c0>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 0307 	and.w	r3, r3, #7
 80011a4:	683a      	ldr	r2, [r7, #0]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d210      	bcs.n	80011cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011aa:	4b24      	ldr	r3, [pc, #144]	@ (800123c <HAL_RCC_ClockConfig+0x1c0>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f023 0207 	bic.w	r2, r3, #7
 80011b2:	4922      	ldr	r1, [pc, #136]	@ (800123c <HAL_RCC_ClockConfig+0x1c0>)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011ba:	4b20      	ldr	r3, [pc, #128]	@ (800123c <HAL_RCC_ClockConfig+0x1c0>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	683a      	ldr	r2, [r7, #0]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d001      	beq.n	80011cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e032      	b.n	8001232 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 0304 	and.w	r3, r3, #4
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d008      	beq.n	80011ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011d8:	4b19      	ldr	r3, [pc, #100]	@ (8001240 <HAL_RCC_ClockConfig+0x1c4>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	4916      	ldr	r1, [pc, #88]	@ (8001240 <HAL_RCC_ClockConfig+0x1c4>)
 80011e6:	4313      	orrs	r3, r2
 80011e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0308 	and.w	r3, r3, #8
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d009      	beq.n	800120a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80011f6:	4b12      	ldr	r3, [pc, #72]	@ (8001240 <HAL_RCC_ClockConfig+0x1c4>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	691b      	ldr	r3, [r3, #16]
 8001202:	00db      	lsls	r3, r3, #3
 8001204:	490e      	ldr	r1, [pc, #56]	@ (8001240 <HAL_RCC_ClockConfig+0x1c4>)
 8001206:	4313      	orrs	r3, r2
 8001208:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800120a:	f000 f821 	bl	8001250 <HAL_RCC_GetSysClockFreq>
 800120e:	4602      	mov	r2, r0
 8001210:	4b0b      	ldr	r3, [pc, #44]	@ (8001240 <HAL_RCC_ClockConfig+0x1c4>)
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	091b      	lsrs	r3, r3, #4
 8001216:	f003 030f 	and.w	r3, r3, #15
 800121a:	490a      	ldr	r1, [pc, #40]	@ (8001244 <HAL_RCC_ClockConfig+0x1c8>)
 800121c:	5ccb      	ldrb	r3, [r1, r3]
 800121e:	fa22 f303 	lsr.w	r3, r2, r3
 8001222:	4a09      	ldr	r2, [pc, #36]	@ (8001248 <HAL_RCC_ClockConfig+0x1cc>)
 8001224:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001226:	4b09      	ldr	r3, [pc, #36]	@ (800124c <HAL_RCC_ClockConfig+0x1d0>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff f996 	bl	800055c <HAL_InitTick>

  return HAL_OK;
 8001230:	2300      	movs	r3, #0
}
 8001232:	4618      	mov	r0, r3
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40022000 	.word	0x40022000
 8001240:	40021000 	.word	0x40021000
 8001244:	080016d8 	.word	0x080016d8
 8001248:	20000000 	.word	0x20000000
 800124c:	20000004 	.word	0x20000004

08001250 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001250:	b480      	push	{r7}
 8001252:	b087      	sub	sp, #28
 8001254:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	2300      	movs	r3, #0
 800125c:	60bb      	str	r3, [r7, #8]
 800125e:	2300      	movs	r3, #0
 8001260:	617b      	str	r3, [r7, #20]
 8001262:	2300      	movs	r3, #0
 8001264:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001266:	2300      	movs	r3, #0
 8001268:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800126a:	4b1e      	ldr	r3, [pc, #120]	@ (80012e4 <HAL_RCC_GetSysClockFreq+0x94>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f003 030c 	and.w	r3, r3, #12
 8001276:	2b04      	cmp	r3, #4
 8001278:	d002      	beq.n	8001280 <HAL_RCC_GetSysClockFreq+0x30>
 800127a:	2b08      	cmp	r3, #8
 800127c:	d003      	beq.n	8001286 <HAL_RCC_GetSysClockFreq+0x36>
 800127e:	e027      	b.n	80012d0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001280:	4b19      	ldr	r3, [pc, #100]	@ (80012e8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001282:	613b      	str	r3, [r7, #16]
      break;
 8001284:	e027      	b.n	80012d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	0c9b      	lsrs	r3, r3, #18
 800128a:	f003 030f 	and.w	r3, r3, #15
 800128e:	4a17      	ldr	r2, [pc, #92]	@ (80012ec <HAL_RCC_GetSysClockFreq+0x9c>)
 8001290:	5cd3      	ldrb	r3, [r2, r3]
 8001292:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d010      	beq.n	80012c0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800129e:	4b11      	ldr	r3, [pc, #68]	@ (80012e4 <HAL_RCC_GetSysClockFreq+0x94>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	0c5b      	lsrs	r3, r3, #17
 80012a4:	f003 0301 	and.w	r3, r3, #1
 80012a8:	4a11      	ldr	r2, [pc, #68]	@ (80012f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80012aa:	5cd3      	ldrb	r3, [r2, r3]
 80012ac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a0d      	ldr	r2, [pc, #52]	@ (80012e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80012b2:	fb03 f202 	mul.w	r2, r3, r2
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80012bc:	617b      	str	r3, [r7, #20]
 80012be:	e004      	b.n	80012ca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4a0c      	ldr	r2, [pc, #48]	@ (80012f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80012c4:	fb02 f303 	mul.w	r3, r2, r3
 80012c8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	613b      	str	r3, [r7, #16]
      break;
 80012ce:	e002      	b.n	80012d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80012d0:	4b05      	ldr	r3, [pc, #20]	@ (80012e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80012d2:	613b      	str	r3, [r7, #16]
      break;
 80012d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012d6:	693b      	ldr	r3, [r7, #16]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	371c      	adds	r7, #28
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc80      	pop	{r7}
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	40021000 	.word	0x40021000
 80012e8:	007a1200 	.word	0x007a1200
 80012ec:	080016f0 	.word	0x080016f0
 80012f0:	08001700 	.word	0x08001700
 80012f4:	003d0900 	.word	0x003d0900

080012f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012fc:	4b02      	ldr	r3, [pc, #8]	@ (8001308 <HAL_RCC_GetHCLKFreq+0x10>)
 80012fe:	681b      	ldr	r3, [r3, #0]
}
 8001300:	4618      	mov	r0, r3
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr
 8001308:	20000000 	.word	0x20000000

0800130c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001310:	f7ff fff2 	bl	80012f8 <HAL_RCC_GetHCLKFreq>
 8001314:	4602      	mov	r2, r0
 8001316:	4b05      	ldr	r3, [pc, #20]	@ (800132c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	0a1b      	lsrs	r3, r3, #8
 800131c:	f003 0307 	and.w	r3, r3, #7
 8001320:	4903      	ldr	r1, [pc, #12]	@ (8001330 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001322:	5ccb      	ldrb	r3, [r1, r3]
 8001324:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001328:	4618      	mov	r0, r3
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40021000 	.word	0x40021000
 8001330:	080016e8 	.word	0x080016e8

08001334 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001338:	f7ff ffde 	bl	80012f8 <HAL_RCC_GetHCLKFreq>
 800133c:	4602      	mov	r2, r0
 800133e:	4b05      	ldr	r3, [pc, #20]	@ (8001354 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	0adb      	lsrs	r3, r3, #11
 8001344:	f003 0307 	and.w	r3, r3, #7
 8001348:	4903      	ldr	r1, [pc, #12]	@ (8001358 <HAL_RCC_GetPCLK2Freq+0x24>)
 800134a:	5ccb      	ldrb	r3, [r1, r3]
 800134c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001350:	4618      	mov	r0, r3
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40021000 	.word	0x40021000
 8001358:	080016e8 	.word	0x080016e8

0800135c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001364:	4b0a      	ldr	r3, [pc, #40]	@ (8001390 <RCC_Delay+0x34>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a0a      	ldr	r2, [pc, #40]	@ (8001394 <RCC_Delay+0x38>)
 800136a:	fba2 2303 	umull	r2, r3, r2, r3
 800136e:	0a5b      	lsrs	r3, r3, #9
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	fb02 f303 	mul.w	r3, r2, r3
 8001376:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001378:	bf00      	nop
  }
  while (Delay --);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	1e5a      	subs	r2, r3, #1
 800137e:	60fa      	str	r2, [r7, #12]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d1f9      	bne.n	8001378 <RCC_Delay+0x1c>
}
 8001384:	bf00      	nop
 8001386:	bf00      	nop
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr
 8001390:	20000000 	.word	0x20000000
 8001394:	10624dd3 	.word	0x10624dd3

08001398 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d101      	bne.n	80013aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e042      	b.n	8001430 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d106      	bne.n	80013c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7fe ffea 	bl	8000398 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2224      	movs	r2, #36	@ 0x24
 80013c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	68da      	ldr	r2, [r3, #12]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80013da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f000 f82b 	bl	8001438 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	691a      	ldr	r2, [r3, #16]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80013f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	695a      	ldr	r2, [r3, #20]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001400:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	68da      	ldr	r2, [r3, #12]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001410:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2220      	movs	r2, #32
 800141c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2220      	movs	r2, #32
 8001424:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800142e:	2300      	movs	r3, #0
}
 8001430:	4618      	mov	r0, r3
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	691b      	ldr	r3, [r3, #16]
 8001446:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	68da      	ldr	r2, [r3, #12]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	430a      	orrs	r2, r1
 8001454:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	689a      	ldr	r2, [r3, #8]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	691b      	ldr	r3, [r3, #16]
 800145e:	431a      	orrs	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	695b      	ldr	r3, [r3, #20]
 8001464:	4313      	orrs	r3, r2
 8001466:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	68db      	ldr	r3, [r3, #12]
 800146e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001472:	f023 030c 	bic.w	r3, r3, #12
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	6812      	ldr	r2, [r2, #0]
 800147a:	68b9      	ldr	r1, [r7, #8]
 800147c:	430b      	orrs	r3, r1
 800147e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	695b      	ldr	r3, [r3, #20]
 8001486:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	699a      	ldr	r2, [r3, #24]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	430a      	orrs	r2, r1
 8001494:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a2c      	ldr	r2, [pc, #176]	@ (800154c <UART_SetConfig+0x114>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d103      	bne.n	80014a8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80014a0:	f7ff ff48 	bl	8001334 <HAL_RCC_GetPCLK2Freq>
 80014a4:	60f8      	str	r0, [r7, #12]
 80014a6:	e002      	b.n	80014ae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80014a8:	f7ff ff30 	bl	800130c <HAL_RCC_GetPCLK1Freq>
 80014ac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80014ae:	68fa      	ldr	r2, [r7, #12]
 80014b0:	4613      	mov	r3, r2
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	4413      	add	r3, r2
 80014b6:	009a      	lsls	r2, r3, #2
 80014b8:	441a      	add	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c4:	4a22      	ldr	r2, [pc, #136]	@ (8001550 <UART_SetConfig+0x118>)
 80014c6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ca:	095b      	lsrs	r3, r3, #5
 80014cc:	0119      	lsls	r1, r3, #4
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	4613      	mov	r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	4413      	add	r3, r2
 80014d6:	009a      	lsls	r2, r3, #2
 80014d8:	441a      	add	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80014e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001550 <UART_SetConfig+0x118>)
 80014e6:	fba3 0302 	umull	r0, r3, r3, r2
 80014ea:	095b      	lsrs	r3, r3, #5
 80014ec:	2064      	movs	r0, #100	@ 0x64
 80014ee:	fb00 f303 	mul.w	r3, r0, r3
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	011b      	lsls	r3, r3, #4
 80014f6:	3332      	adds	r3, #50	@ 0x32
 80014f8:	4a15      	ldr	r2, [pc, #84]	@ (8001550 <UART_SetConfig+0x118>)
 80014fa:	fba2 2303 	umull	r2, r3, r2, r3
 80014fe:	095b      	lsrs	r3, r3, #5
 8001500:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001504:	4419      	add	r1, r3
 8001506:	68fa      	ldr	r2, [r7, #12]
 8001508:	4613      	mov	r3, r2
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	4413      	add	r3, r2
 800150e:	009a      	lsls	r2, r3, #2
 8001510:	441a      	add	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	fbb2 f2f3 	udiv	r2, r2, r3
 800151c:	4b0c      	ldr	r3, [pc, #48]	@ (8001550 <UART_SetConfig+0x118>)
 800151e:	fba3 0302 	umull	r0, r3, r3, r2
 8001522:	095b      	lsrs	r3, r3, #5
 8001524:	2064      	movs	r0, #100	@ 0x64
 8001526:	fb00 f303 	mul.w	r3, r0, r3
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	011b      	lsls	r3, r3, #4
 800152e:	3332      	adds	r3, #50	@ 0x32
 8001530:	4a07      	ldr	r2, [pc, #28]	@ (8001550 <UART_SetConfig+0x118>)
 8001532:	fba2 2303 	umull	r2, r3, r2, r3
 8001536:	095b      	lsrs	r3, r3, #5
 8001538:	f003 020f 	and.w	r2, r3, #15
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	440a      	add	r2, r1
 8001542:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001544:	bf00      	nop
 8001546:	3710      	adds	r7, #16
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40013800 	.word	0x40013800
 8001550:	51eb851f 	.word	0x51eb851f

08001554 <init_led>:
#include "gpio.h"
extern uint8_t blinked;
uint32_t myTick = 0;

void init_led(GPIO_TypeDef* port, uint16_t pin)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	460b      	mov	r3, r1
 800155e:	807b      	strh	r3, [r7, #2]
	  /*Configure GPIO pin : LED_Pin */
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001560:	f107 0308 	add.w	r3, r7, #8
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
	  GPIO_InitStruct.Pin = pin;
 800156e:	887b      	ldrh	r3, [r7, #2]
 8001570:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001572:	2301      	movs	r3, #1
 8001574:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157a:	2302      	movs	r3, #2
 800157c:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(port, &GPIO_InitStruct);
 800157e:	f107 0308 	add.w	r3, r7, #8
 8001582:	4619      	mov	r1, r3
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f7ff f943 	bl	8000810 <HAL_GPIO_Init>
}
 800158a:	bf00      	nop
 800158c:	3718      	adds	r7, #24
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
	...

08001594 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == Button_Pin)
 800159e:	88fb      	ldrh	r3, [r7, #6]
 80015a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80015a4:	d109      	bne.n	80015ba <HAL_GPIO_EXTI_Callback+0x26>
		blinked = ! blinked;
 80015a6:	4b07      	ldr	r3, [pc, #28]	@ (80015c4 <HAL_GPIO_EXTI_Callback+0x30>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	bf0c      	ite	eq
 80015ae:	2301      	moveq	r3, #1
 80015b0:	2300      	movne	r3, #0
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	461a      	mov	r2, r3
 80015b6:	4b03      	ldr	r3, [pc, #12]	@ (80015c4 <HAL_GPIO_EXTI_Callback+0x30>)
 80015b8:	701a      	strb	r2, [r3, #0]
}
 80015ba:	bf00      	nop
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	bc80      	pop	{r7}
 80015c2:	4770      	bx	lr
 80015c4:	20000070 	.word	0x20000070

080015c8 <loop>:

void loop()
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
	  if (blinked)
 80015cc:	4b23      	ldr	r3, [pc, #140]	@ (800165c <loop+0x94>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d037      	beq.n	8001644 <loop+0x7c>
		  {
		  if ((HAL_GetTick() - myTick) < DARKTIME)
 80015d4:	f7ff f804 	bl	80005e0 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	4b21      	ldr	r3, [pc, #132]	@ (8001660 <loop+0x98>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	f240 32b5 	movw	r2, #949	@ 0x3b5
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d805      	bhi.n	80015f4 <loop+0x2c>
			  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, LedOff);
 80015e8:	2200      	movs	r2, #0
 80015ea:	2120      	movs	r1, #32
 80015ec:	481d      	ldr	r0, [pc, #116]	@ (8001664 <loop+0x9c>)
 80015ee:	f7ff fa93 	bl	8000b18 <HAL_GPIO_WritePin>
	  else
		  {
			  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, LedOff);
			  myTick = HAL_GetTick();
		  }
}
 80015f2:	e031      	b.n	8001658 <loop+0x90>
		  else if (((HAL_GetTick() - myTick) >= DARKTIME) && ((HAL_GetTick() - myTick) < (DARKTIME + FLASHTIME)))
 80015f4:	f7fe fff4 	bl	80005e0 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	4b19      	ldr	r3, [pc, #100]	@ (8001660 <loop+0x98>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8001604:	4293      	cmp	r3, r2
 8001606:	d90e      	bls.n	8001626 <loop+0x5e>
 8001608:	f7fe ffea 	bl	80005e0 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	4b14      	ldr	r3, [pc, #80]	@ (8001660 <loop+0x98>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001618:	d205      	bcs.n	8001626 <loop+0x5e>
			  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, LedOn);
 800161a:	2201      	movs	r2, #1
 800161c:	2120      	movs	r1, #32
 800161e:	4811      	ldr	r0, [pc, #68]	@ (8001664 <loop+0x9c>)
 8001620:	f7ff fa7a 	bl	8000b18 <HAL_GPIO_WritePin>
}
 8001624:	e018      	b.n	8001658 <loop+0x90>
		  else if ((HAL_GetTick() - myTick) >= (DARKTIME + FLASHTIME))
 8001626:	f7fe ffdb 	bl	80005e0 <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	4b0c      	ldr	r3, [pc, #48]	@ (8001660 <loop+0x98>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001636:	d30f      	bcc.n	8001658 <loop+0x90>
			  myTick = HAL_GetTick();
 8001638:	f7fe ffd2 	bl	80005e0 <HAL_GetTick>
 800163c:	4603      	mov	r3, r0
 800163e:	4a08      	ldr	r2, [pc, #32]	@ (8001660 <loop+0x98>)
 8001640:	6013      	str	r3, [r2, #0]
}
 8001642:	e009      	b.n	8001658 <loop+0x90>
			  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, LedOff);
 8001644:	2200      	movs	r2, #0
 8001646:	2120      	movs	r1, #32
 8001648:	4806      	ldr	r0, [pc, #24]	@ (8001664 <loop+0x9c>)
 800164a:	f7ff fa65 	bl	8000b18 <HAL_GPIO_WritePin>
			  myTick = HAL_GetTick();
 800164e:	f7fe ffc7 	bl	80005e0 <HAL_GetTick>
 8001652:	4603      	mov	r3, r0
 8001654:	4a02      	ldr	r2, [pc, #8]	@ (8001660 <loop+0x98>)
 8001656:	6013      	str	r3, [r2, #0]
}
 8001658:	bf00      	nop
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20000070 	.word	0x20000070
 8001660:	20000078 	.word	0x20000078
 8001664:	40010800 	.word	0x40010800

08001668 <memset>:
 8001668:	4603      	mov	r3, r0
 800166a:	4402      	add	r2, r0
 800166c:	4293      	cmp	r3, r2
 800166e:	d100      	bne.n	8001672 <memset+0xa>
 8001670:	4770      	bx	lr
 8001672:	f803 1b01 	strb.w	r1, [r3], #1
 8001676:	e7f9      	b.n	800166c <memset+0x4>

08001678 <__libc_init_array>:
 8001678:	b570      	push	{r4, r5, r6, lr}
 800167a:	2600      	movs	r6, #0
 800167c:	4d0c      	ldr	r5, [pc, #48]	@ (80016b0 <__libc_init_array+0x38>)
 800167e:	4c0d      	ldr	r4, [pc, #52]	@ (80016b4 <__libc_init_array+0x3c>)
 8001680:	1b64      	subs	r4, r4, r5
 8001682:	10a4      	asrs	r4, r4, #2
 8001684:	42a6      	cmp	r6, r4
 8001686:	d109      	bne.n	800169c <__libc_init_array+0x24>
 8001688:	f000 f81a 	bl	80016c0 <_init>
 800168c:	2600      	movs	r6, #0
 800168e:	4d0a      	ldr	r5, [pc, #40]	@ (80016b8 <__libc_init_array+0x40>)
 8001690:	4c0a      	ldr	r4, [pc, #40]	@ (80016bc <__libc_init_array+0x44>)
 8001692:	1b64      	subs	r4, r4, r5
 8001694:	10a4      	asrs	r4, r4, #2
 8001696:	42a6      	cmp	r6, r4
 8001698:	d105      	bne.n	80016a6 <__libc_init_array+0x2e>
 800169a:	bd70      	pop	{r4, r5, r6, pc}
 800169c:	f855 3b04 	ldr.w	r3, [r5], #4
 80016a0:	4798      	blx	r3
 80016a2:	3601      	adds	r6, #1
 80016a4:	e7ee      	b.n	8001684 <__libc_init_array+0xc>
 80016a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80016aa:	4798      	blx	r3
 80016ac:	3601      	adds	r6, #1
 80016ae:	e7f2      	b.n	8001696 <__libc_init_array+0x1e>
 80016b0:	08001704 	.word	0x08001704
 80016b4:	08001704 	.word	0x08001704
 80016b8:	08001704 	.word	0x08001704
 80016bc:	08001708 	.word	0x08001708

080016c0 <_init>:
 80016c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016c2:	bf00      	nop
 80016c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016c6:	bc08      	pop	{r3}
 80016c8:	469e      	mov	lr, r3
 80016ca:	4770      	bx	lr

080016cc <_fini>:
 80016cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016ce:	bf00      	nop
 80016d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016d2:	bc08      	pop	{r3}
 80016d4:	469e      	mov	lr, r3
 80016d6:	4770      	bx	lr
