
stm32g431.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002898  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002a70  08002a70  00003a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a90  08002a90  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002a90  08002a90  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002a90  08002a90  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a90  08002a90  00003a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002a94  08002a94  00003a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002a98  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  2000000c  08002aa4  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08002aa4  000040f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007b80  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001781  00000000  00000000  0000bbbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000840  00000000  00000000  0000d340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000062e  00000000  00000000  0000db80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ba72  00000000  00000000  0000e1ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000086fd  00000000  00000000  00029c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aea16  00000000  00000000  0003231d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e0d33  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002048  00000000  00000000  000e0d78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000e2dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002a58 	.word	0x08002a58

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08002a58 	.word	0x08002a58

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b590      	push	{r4, r7, lr}
 800021a:	b08f      	sub	sp, #60	@ 0x3c
 800021c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021e:	f000 fa84 	bl	800072a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000222:	f000 f851 	bl	80002c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000226:	f000 f907 	bl	8000438 <MX_GPIO_Init>
  MX_SPI1_Init();
 800022a:	f000 f88d 	bl	8000348 <MX_SPI1_Init>
  MX_SPI2_Init();
 800022e:	f000 f8c9 	bl	80003c4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
uint8_t rxBuffer[32] = {0};
 8000232:	f107 0314 	add.w	r3, r7, #20
 8000236:	2220      	movs	r2, #32
 8000238:	2100      	movs	r1, #0
 800023a:	4618      	mov	r0, r3
 800023c:	f002 fbe0 	bl	8002a00 <memset>
uint8_t txBuffer[] = "MCUINSIDE rev.2";
 8000240:	4b1d      	ldr	r3, [pc, #116]	@ (80002b8 <main+0xa0>)
 8000242:	1d3c      	adds	r4, r7, #4
 8000244:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000246:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
uint32_t myTisck = 0;
 800024a:	2300      	movs	r3, #0
 800024c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_GetTick() - myTisck > 200)
 800024e:	f000 fad1 	bl	80007f4 <HAL_GetTick>
 8000252:	4602      	mov	r2, r0
 8000254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000256:	1ad3      	subs	r3, r2, r3
 8000258:	2bc8      	cmp	r3, #200	@ 0xc8
 800025a:	d920      	bls.n	800029e <main+0x86>
	  {
		  HAL_SPI_Receive_IT(&hspi2, rxBuffer, sizeof(txBuffer));
 800025c:	f107 0314 	add.w	r3, r7, #20
 8000260:	2210      	movs	r2, #16
 8000262:	4619      	mov	r1, r3
 8000264:	4815      	ldr	r0, [pc, #84]	@ (80002bc <main+0xa4>)
 8000266:	f001 fdc7 	bl	8001df8 <HAL_SPI_Receive_IT>
		  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, 0);
 800026a:	2200      	movs	r2, #0
 800026c:	2110      	movs	r1, #16
 800026e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000272:	f000 fdc3 	bl	8000dfc <HAL_GPIO_WritePin>
		  HAL_SPI_Transmit(&hspi1, txBuffer, sizeof(txBuffer), 10);
 8000276:	1d39      	adds	r1, r7, #4
 8000278:	230a      	movs	r3, #10
 800027a:	2210      	movs	r2, #16
 800027c:	4810      	ldr	r0, [pc, #64]	@ (80002c0 <main+0xa8>)
 800027e:	f001 fc44 	bl	8001b0a <HAL_SPI_Transmit>
		  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, 0);
 8000282:	2200      	movs	r2, #0
 8000284:	2110      	movs	r1, #16
 8000286:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800028a:	f000 fdb7 	bl	8000dfc <HAL_GPIO_WritePin>
		  myTisck = HAL_GetTick();
 800028e:	f000 fab1 	bl	80007f4 <HAL_GetTick>
 8000292:	6378      	str	r0, [r7, #52]	@ 0x34
		  HAL_GPIO_TogglePin(txLED_GPIO_Port, txLED_Pin);
 8000294:	2102      	movs	r1, #2
 8000296:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800029a:	f000 fdc7 	bl	8000e2c <HAL_GPIO_TogglePin>
	  }
	  if (flag)
 800029e:	4b09      	ldr	r3, [pc, #36]	@ (80002c4 <main+0xac>)
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d0d3      	beq.n	800024e <main+0x36>
	  {
		  HAL_GPIO_TogglePin(rxLED_GPIO_Port, rxLED_Pin);
 80002a6:	2101      	movs	r1, #1
 80002a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002ac:	f000 fdbe 	bl	8000e2c <HAL_GPIO_TogglePin>
		  flag = 0;
 80002b0:	4b04      	ldr	r3, [pc, #16]	@ (80002c4 <main+0xac>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	701a      	strb	r2, [r3, #0]
	  if (HAL_GetTick() - myTisck > 200)
 80002b6:	e7ca      	b.n	800024e <main+0x36>
 80002b8:	08002a70 	.word	0x08002a70
 80002bc:	2000008c 	.word	0x2000008c
 80002c0:	20000028 	.word	0x20000028
 80002c4:	200000f0 	.word	0x200000f0

080002c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b094      	sub	sp, #80	@ 0x50
 80002cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ce:	f107 0318 	add.w	r3, r7, #24
 80002d2:	2238      	movs	r2, #56	@ 0x38
 80002d4:	2100      	movs	r1, #0
 80002d6:	4618      	mov	r0, r3
 80002d8:	f002 fb92 	bl	8002a00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	2200      	movs	r2, #0
 80002e0:	601a      	str	r2, [r3, #0]
 80002e2:	605a      	str	r2, [r3, #4]
 80002e4:	609a      	str	r2, [r3, #8]
 80002e6:	60da      	str	r2, [r3, #12]
 80002e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002ea:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80002ee:	f000 fdb7 	bl	8000e60 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002f2:	2302      	movs	r3, #2
 80002f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80002fa:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002fc:	2340      	movs	r3, #64	@ 0x40
 80002fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000300:	2300      	movs	r3, #0
 8000302:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000304:	f107 0318 	add.w	r3, r7, #24
 8000308:	4618      	mov	r0, r3
 800030a:	f000 fe5d 	bl	8000fc8 <HAL_RCC_OscConfig>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000314:	f000 f8ec 	bl	80004f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000318:	230f      	movs	r3, #15
 800031a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800031c:	2301      	movs	r3, #1
 800031e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000320:	2300      	movs	r3, #0
 8000322:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000324:	2300      	movs	r3, #0
 8000326:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000328:	2300      	movs	r3, #0
 800032a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800032c:	1d3b      	adds	r3, r7, #4
 800032e:	2100      	movs	r1, #0
 8000330:	4618      	mov	r0, r3
 8000332:	f001 f95b 	bl	80015ec <HAL_RCC_ClockConfig>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800033c:	f000 f8d8 	bl	80004f0 <Error_Handler>
  }
}
 8000340:	bf00      	nop
 8000342:	3750      	adds	r7, #80	@ 0x50
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}

08000348 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800034c:	4b1b      	ldr	r3, [pc, #108]	@ (80003bc <MX_SPI1_Init+0x74>)
 800034e:	4a1c      	ldr	r2, [pc, #112]	@ (80003c0 <MX_SPI1_Init+0x78>)
 8000350:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000352:	4b1a      	ldr	r3, [pc, #104]	@ (80003bc <MX_SPI1_Init+0x74>)
 8000354:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000358:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800035a:	4b18      	ldr	r3, [pc, #96]	@ (80003bc <MX_SPI1_Init+0x74>)
 800035c:	2200      	movs	r2, #0
 800035e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000360:	4b16      	ldr	r3, [pc, #88]	@ (80003bc <MX_SPI1_Init+0x74>)
 8000362:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000366:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000368:	4b14      	ldr	r3, [pc, #80]	@ (80003bc <MX_SPI1_Init+0x74>)
 800036a:	2200      	movs	r2, #0
 800036c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800036e:	4b13      	ldr	r3, [pc, #76]	@ (80003bc <MX_SPI1_Init+0x74>)
 8000370:	2200      	movs	r2, #0
 8000372:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000374:	4b11      	ldr	r3, [pc, #68]	@ (80003bc <MX_SPI1_Init+0x74>)
 8000376:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800037a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800037c:	4b0f      	ldr	r3, [pc, #60]	@ (80003bc <MX_SPI1_Init+0x74>)
 800037e:	2200      	movs	r2, #0
 8000380:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000382:	4b0e      	ldr	r3, [pc, #56]	@ (80003bc <MX_SPI1_Init+0x74>)
 8000384:	2200      	movs	r2, #0
 8000386:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000388:	4b0c      	ldr	r3, [pc, #48]	@ (80003bc <MX_SPI1_Init+0x74>)
 800038a:	2200      	movs	r2, #0
 800038c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800038e:	4b0b      	ldr	r3, [pc, #44]	@ (80003bc <MX_SPI1_Init+0x74>)
 8000390:	2200      	movs	r2, #0
 8000392:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000394:	4b09      	ldr	r3, [pc, #36]	@ (80003bc <MX_SPI1_Init+0x74>)
 8000396:	2207      	movs	r2, #7
 8000398:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800039a:	4b08      	ldr	r3, [pc, #32]	@ (80003bc <MX_SPI1_Init+0x74>)
 800039c:	2200      	movs	r2, #0
 800039e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80003a0:	4b06      	ldr	r3, [pc, #24]	@ (80003bc <MX_SPI1_Init+0x74>)
 80003a2:	2208      	movs	r2, #8
 80003a4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003a6:	4805      	ldr	r0, [pc, #20]	@ (80003bc <MX_SPI1_Init+0x74>)
 80003a8:	f001 fb04 	bl	80019b4 <HAL_SPI_Init>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80003b2:	f000 f89d 	bl	80004f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003b6:	bf00      	nop
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	20000028 	.word	0x20000028
 80003c0:	40013000 	.word	0x40013000

080003c4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80003c8:	4b19      	ldr	r3, [pc, #100]	@ (8000430 <MX_SPI2_Init+0x6c>)
 80003ca:	4a1a      	ldr	r2, [pc, #104]	@ (8000434 <MX_SPI2_Init+0x70>)
 80003cc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80003ce:	4b18      	ldr	r3, [pc, #96]	@ (8000430 <MX_SPI2_Init+0x6c>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80003d4:	4b16      	ldr	r3, [pc, #88]	@ (8000430 <MX_SPI2_Init+0x6c>)
 80003d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80003da:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80003dc:	4b14      	ldr	r3, [pc, #80]	@ (8000430 <MX_SPI2_Init+0x6c>)
 80003de:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80003e2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003e4:	4b12      	ldr	r3, [pc, #72]	@ (8000430 <MX_SPI2_Init+0x6c>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003ea:	4b11      	ldr	r3, [pc, #68]	@ (8000430 <MX_SPI2_Init+0x6c>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80003f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000430 <MX_SPI2_Init+0x6c>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000430 <MX_SPI2_Init+0x6c>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80003fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000430 <MX_SPI2_Init+0x6c>)
 80003fe:	2200      	movs	r2, #0
 8000400:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000402:	4b0b      	ldr	r3, [pc, #44]	@ (8000430 <MX_SPI2_Init+0x6c>)
 8000404:	2200      	movs	r2, #0
 8000406:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000408:	4b09      	ldr	r3, [pc, #36]	@ (8000430 <MX_SPI2_Init+0x6c>)
 800040a:	2207      	movs	r2, #7
 800040c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800040e:	4b08      	ldr	r3, [pc, #32]	@ (8000430 <MX_SPI2_Init+0x6c>)
 8000410:	2200      	movs	r2, #0
 8000412:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000414:	4b06      	ldr	r3, [pc, #24]	@ (8000430 <MX_SPI2_Init+0x6c>)
 8000416:	2200      	movs	r2, #0
 8000418:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800041a:	4805      	ldr	r0, [pc, #20]	@ (8000430 <MX_SPI2_Init+0x6c>)
 800041c:	f001 faca 	bl	80019b4 <HAL_SPI_Init>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 8000426:	f000 f863 	bl	80004f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800042a:	bf00      	nop
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	2000008c 	.word	0x2000008c
 8000434:	40003800 	.word	0x40003800

08000438 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b088      	sub	sp, #32
 800043c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800043e:	f107 030c 	add.w	r3, r7, #12
 8000442:	2200      	movs	r2, #0
 8000444:	601a      	str	r2, [r3, #0]
 8000446:	605a      	str	r2, [r3, #4]
 8000448:	609a      	str	r2, [r3, #8]
 800044a:	60da      	str	r2, [r3, #12]
 800044c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800044e:	4b1b      	ldr	r3, [pc, #108]	@ (80004bc <MX_GPIO_Init+0x84>)
 8000450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000452:	4a1a      	ldr	r2, [pc, #104]	@ (80004bc <MX_GPIO_Init+0x84>)
 8000454:	f043 0301 	orr.w	r3, r3, #1
 8000458:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800045a:	4b18      	ldr	r3, [pc, #96]	@ (80004bc <MX_GPIO_Init+0x84>)
 800045c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800045e:	f003 0301 	and.w	r3, r3, #1
 8000462:	60bb      	str	r3, [r7, #8]
 8000464:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000466:	4b15      	ldr	r3, [pc, #84]	@ (80004bc <MX_GPIO_Init+0x84>)
 8000468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800046a:	4a14      	ldr	r2, [pc, #80]	@ (80004bc <MX_GPIO_Init+0x84>)
 800046c:	f043 0302 	orr.w	r3, r3, #2
 8000470:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000472:	4b12      	ldr	r3, [pc, #72]	@ (80004bc <MX_GPIO_Init+0x84>)
 8000474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000476:	f003 0302 	and.w	r3, r3, #2
 800047a:	607b      	str	r3, [r7, #4]
 800047c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, rxLED_Pin|txLED_Pin, GPIO_PIN_RESET);
 800047e:	2200      	movs	r2, #0
 8000480:	2103      	movs	r1, #3
 8000482:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000486:	f000 fcb9 	bl	8000dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET);
 800048a:	2201      	movs	r2, #1
 800048c:	2110      	movs	r1, #16
 800048e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000492:	f000 fcb3 	bl	8000dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : rxLED_Pin txLED_Pin SS_Pin */
  GPIO_InitStruct.Pin = rxLED_Pin|txLED_Pin|SS_Pin;
 8000496:	2313      	movs	r3, #19
 8000498:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800049a:	2301      	movs	r3, #1
 800049c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049e:	2300      	movs	r3, #0
 80004a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a2:	2300      	movs	r3, #0
 80004a4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a6:	f107 030c 	add.w	r3, r7, #12
 80004aa:	4619      	mov	r1, r3
 80004ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004b0:	f000 fb22 	bl	8000af8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80004b4:	bf00      	nop
 80004b6:	3720      	adds	r7, #32
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	40021000 	.word	0x40021000

080004c0 <HAL_SPI_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
		flag = (&hspi2 == hspi) ? 1: 0;
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	4a07      	ldr	r2, [pc, #28]	@ (80004e8 <HAL_SPI_RxCpltCallback+0x28>)
 80004cc:	4293      	cmp	r3, r2
 80004ce:	bf0c      	ite	eq
 80004d0:	2301      	moveq	r3, #1
 80004d2:	2300      	movne	r3, #0
 80004d4:	b2db      	uxtb	r3, r3
 80004d6:	461a      	mov	r2, r3
 80004d8:	4b04      	ldr	r3, [pc, #16]	@ (80004ec <HAL_SPI_RxCpltCallback+0x2c>)
 80004da:	701a      	strb	r2, [r3, #0]
}
 80004dc:	bf00      	nop
 80004de:	370c      	adds	r7, #12
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr
 80004e8:	2000008c 	.word	0x2000008c
 80004ec:	200000f0 	.word	0x200000f0

080004f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f4:	b672      	cpsid	i
}
 80004f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004f8:	bf00      	nop
 80004fa:	e7fd      	b.n	80004f8 <Error_Handler+0x8>

080004fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000502:	4b0f      	ldr	r3, [pc, #60]	@ (8000540 <HAL_MspInit+0x44>)
 8000504:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000506:	4a0e      	ldr	r2, [pc, #56]	@ (8000540 <HAL_MspInit+0x44>)
 8000508:	f043 0301 	orr.w	r3, r3, #1
 800050c:	6613      	str	r3, [r2, #96]	@ 0x60
 800050e:	4b0c      	ldr	r3, [pc, #48]	@ (8000540 <HAL_MspInit+0x44>)
 8000510:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000512:	f003 0301 	and.w	r3, r3, #1
 8000516:	607b      	str	r3, [r7, #4]
 8000518:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800051a:	4b09      	ldr	r3, [pc, #36]	@ (8000540 <HAL_MspInit+0x44>)
 800051c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800051e:	4a08      	ldr	r2, [pc, #32]	@ (8000540 <HAL_MspInit+0x44>)
 8000520:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000524:	6593      	str	r3, [r2, #88]	@ 0x58
 8000526:	4b06      	ldr	r3, [pc, #24]	@ (8000540 <HAL_MspInit+0x44>)
 8000528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800052a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800052e:	603b      	str	r3, [r7, #0]
 8000530:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000532:	f000 fd39 	bl	8000fa8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000536:	bf00      	nop
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	40021000 	.word	0x40021000

08000544 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b08c      	sub	sp, #48	@ 0x30
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054c:	f107 031c 	add.w	r3, r7, #28
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
 800055a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a33      	ldr	r2, [pc, #204]	@ (8000630 <HAL_SPI_MspInit+0xec>)
 8000562:	4293      	cmp	r3, r2
 8000564:	d129      	bne.n	80005ba <HAL_SPI_MspInit+0x76>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000566:	4b33      	ldr	r3, [pc, #204]	@ (8000634 <HAL_SPI_MspInit+0xf0>)
 8000568:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800056a:	4a32      	ldr	r2, [pc, #200]	@ (8000634 <HAL_SPI_MspInit+0xf0>)
 800056c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000570:	6613      	str	r3, [r2, #96]	@ 0x60
 8000572:	4b30      	ldr	r3, [pc, #192]	@ (8000634 <HAL_SPI_MspInit+0xf0>)
 8000574:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000576:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800057a:	61bb      	str	r3, [r7, #24]
 800057c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800057e:	4b2d      	ldr	r3, [pc, #180]	@ (8000634 <HAL_SPI_MspInit+0xf0>)
 8000580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000582:	4a2c      	ldr	r2, [pc, #176]	@ (8000634 <HAL_SPI_MspInit+0xf0>)
 8000584:	f043 0301 	orr.w	r3, r3, #1
 8000588:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800058a:	4b2a      	ldr	r3, [pc, #168]	@ (8000634 <HAL_SPI_MspInit+0xf0>)
 800058c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800058e:	f003 0301 	and.w	r3, r3, #1
 8000592:	617b      	str	r3, [r7, #20]
 8000594:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000596:	23a0      	movs	r3, #160	@ 0xa0
 8000598:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800059a:	2302      	movs	r3, #2
 800059c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059e:	2300      	movs	r3, #0
 80005a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a2:	2300      	movs	r3, #0
 80005a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80005a6:	2305      	movs	r3, #5
 80005a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005aa:	f107 031c 	add.w	r3, r7, #28
 80005ae:	4619      	mov	r1, r3
 80005b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005b4:	f000 faa0 	bl	8000af8 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 80005b8:	e035      	b.n	8000626 <HAL_SPI_MspInit+0xe2>
  else if(hspi->Instance==SPI2)
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a1e      	ldr	r2, [pc, #120]	@ (8000638 <HAL_SPI_MspInit+0xf4>)
 80005c0:	4293      	cmp	r3, r2
 80005c2:	d130      	bne.n	8000626 <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80005c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000634 <HAL_SPI_MspInit+0xf0>)
 80005c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005c8:	4a1a      	ldr	r2, [pc, #104]	@ (8000634 <HAL_SPI_MspInit+0xf0>)
 80005ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80005d0:	4b18      	ldr	r3, [pc, #96]	@ (8000634 <HAL_SPI_MspInit+0xf0>)
 80005d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005d8:	613b      	str	r3, [r7, #16]
 80005da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005dc:	4b15      	ldr	r3, [pc, #84]	@ (8000634 <HAL_SPI_MspInit+0xf0>)
 80005de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005e0:	4a14      	ldr	r2, [pc, #80]	@ (8000634 <HAL_SPI_MspInit+0xf0>)
 80005e2:	f043 0302 	orr.w	r3, r3, #2
 80005e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005e8:	4b12      	ldr	r3, [pc, #72]	@ (8000634 <HAL_SPI_MspInit+0xf0>)
 80005ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ec:	f003 0302 	and.w	r3, r3, #2
 80005f0:	60fb      	str	r3, [r7, #12]
 80005f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80005f4:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 80005f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005fa:	2302      	movs	r3, #2
 80005fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fe:	2300      	movs	r3, #0
 8000600:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000602:	2300      	movs	r3, #0
 8000604:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000606:	2305      	movs	r3, #5
 8000608:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800060a:	f107 031c 	add.w	r3, r7, #28
 800060e:	4619      	mov	r1, r3
 8000610:	480a      	ldr	r0, [pc, #40]	@ (800063c <HAL_SPI_MspInit+0xf8>)
 8000612:	f000 fa71 	bl	8000af8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000616:	2200      	movs	r2, #0
 8000618:	2100      	movs	r1, #0
 800061a:	2024      	movs	r0, #36	@ 0x24
 800061c:	f000 f9d1 	bl	80009c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000620:	2024      	movs	r0, #36	@ 0x24
 8000622:	f000 f9e8 	bl	80009f6 <HAL_NVIC_EnableIRQ>
}
 8000626:	bf00      	nop
 8000628:	3730      	adds	r7, #48	@ 0x30
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40013000 	.word	0x40013000
 8000634:	40021000 	.word	0x40021000
 8000638:	40003800 	.word	0x40003800
 800063c:	48000400 	.word	0x48000400

08000640 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000644:	bf00      	nop
 8000646:	e7fd      	b.n	8000644 <NMI_Handler+0x4>

08000648 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800064c:	bf00      	nop
 800064e:	e7fd      	b.n	800064c <HardFault_Handler+0x4>

08000650 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000654:	bf00      	nop
 8000656:	e7fd      	b.n	8000654 <MemManage_Handler+0x4>

08000658 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800065c:	bf00      	nop
 800065e:	e7fd      	b.n	800065c <BusFault_Handler+0x4>

08000660 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000664:	bf00      	nop
 8000666:	e7fd      	b.n	8000664 <UsageFault_Handler+0x4>

08000668 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800066c:	bf00      	nop
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr

08000676 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000676:	b480      	push	{r7}
 8000678:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800067a:	bf00      	nop
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr

08000684 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000688:	bf00      	nop
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr

08000692 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000692:	b580      	push	{r7, lr}
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000696:	f000 f89b 	bl	80007d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
	...

080006a0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80006a4:	4802      	ldr	r0, [pc, #8]	@ (80006b0 <SPI2_IRQHandler+0x10>)
 80006a6:	f001 fcfb 	bl	80020a0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	2000008c 	.word	0x2000008c

080006b4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006b8:	4b06      	ldr	r3, [pc, #24]	@ (80006d4 <SystemInit+0x20>)
 80006ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006be:	4a05      	ldr	r2, [pc, #20]	@ (80006d4 <SystemInit+0x20>)
 80006c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	e000ed00 	.word	0xe000ed00

080006d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006d8:	480d      	ldr	r0, [pc, #52]	@ (8000710 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006da:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80006dc:	f7ff ffea 	bl	80006b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006e0:	480c      	ldr	r0, [pc, #48]	@ (8000714 <LoopForever+0x6>)
  ldr r1, =_edata
 80006e2:	490d      	ldr	r1, [pc, #52]	@ (8000718 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006e4:	4a0d      	ldr	r2, [pc, #52]	@ (800071c <LoopForever+0xe>)
  movs r3, #0
 80006e6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80006e8:	e002      	b.n	80006f0 <LoopCopyDataInit>

080006ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ee:	3304      	adds	r3, #4

080006f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006f4:	d3f9      	bcc.n	80006ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006f6:	4a0a      	ldr	r2, [pc, #40]	@ (8000720 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006f8:	4c0a      	ldr	r4, [pc, #40]	@ (8000724 <LoopForever+0x16>)
  movs r3, #0
 80006fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006fc:	e001      	b.n	8000702 <LoopFillZerobss>

080006fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000700:	3204      	adds	r2, #4

08000702 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000702:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000704:	d3fb      	bcc.n	80006fe <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000706:	f002 f983 	bl	8002a10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800070a:	f7ff fd85 	bl	8000218 <main>

0800070e <LoopForever>:

LoopForever:
    b LoopForever
 800070e:	e7fe      	b.n	800070e <LoopForever>
  ldr   r0, =_estack
 8000710:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000714:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000718:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800071c:	08002a98 	.word	0x08002a98
  ldr r2, =_sbss
 8000720:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000724:	200000f8 	.word	0x200000f8

08000728 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000728:	e7fe      	b.n	8000728 <ADC1_2_IRQHandler>

0800072a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800072a:	b580      	push	{r7, lr}
 800072c:	b082      	sub	sp, #8
 800072e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000730:	2300      	movs	r3, #0
 8000732:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000734:	2003      	movs	r0, #3
 8000736:	f000 f939 	bl	80009ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800073a:	200f      	movs	r0, #15
 800073c:	f000 f80e 	bl	800075c <HAL_InitTick>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d002      	beq.n	800074c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000746:	2301      	movs	r3, #1
 8000748:	71fb      	strb	r3, [r7, #7]
 800074a:	e001      	b.n	8000750 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800074c:	f7ff fed6 	bl	80004fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000750:	79fb      	ldrb	r3, [r7, #7]

}
 8000752:	4618      	mov	r0, r3
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
	...

0800075c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000764:	2300      	movs	r3, #0
 8000766:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000768:	4b16      	ldr	r3, [pc, #88]	@ (80007c4 <HAL_InitTick+0x68>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d022      	beq.n	80007b6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000770:	4b15      	ldr	r3, [pc, #84]	@ (80007c8 <HAL_InitTick+0x6c>)
 8000772:	681a      	ldr	r2, [r3, #0]
 8000774:	4b13      	ldr	r3, [pc, #76]	@ (80007c4 <HAL_InitTick+0x68>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800077c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000780:	fbb2 f3f3 	udiv	r3, r2, r3
 8000784:	4618      	mov	r0, r3
 8000786:	f000 f944 	bl	8000a12 <HAL_SYSTICK_Config>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d10f      	bne.n	80007b0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2b0f      	cmp	r3, #15
 8000794:	d809      	bhi.n	80007aa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000796:	2200      	movs	r2, #0
 8000798:	6879      	ldr	r1, [r7, #4]
 800079a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800079e:	f000 f910 	bl	80009c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007a2:	4a0a      	ldr	r2, [pc, #40]	@ (80007cc <HAL_InitTick+0x70>)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	6013      	str	r3, [r2, #0]
 80007a8:	e007      	b.n	80007ba <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80007aa:	2301      	movs	r3, #1
 80007ac:	73fb      	strb	r3, [r7, #15]
 80007ae:	e004      	b.n	80007ba <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80007b0:	2301      	movs	r3, #1
 80007b2:	73fb      	strb	r3, [r7, #15]
 80007b4:	e001      	b.n	80007ba <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007b6:	2301      	movs	r3, #1
 80007b8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80007ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80007bc:	4618      	mov	r0, r3
 80007be:	3710      	adds	r7, #16
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000008 	.word	0x20000008
 80007c8:	20000000 	.word	0x20000000
 80007cc:	20000004 	.word	0x20000004

080007d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007d4:	4b05      	ldr	r3, [pc, #20]	@ (80007ec <HAL_IncTick+0x1c>)
 80007d6:	681a      	ldr	r2, [r3, #0]
 80007d8:	4b05      	ldr	r3, [pc, #20]	@ (80007f0 <HAL_IncTick+0x20>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4413      	add	r3, r2
 80007de:	4a03      	ldr	r2, [pc, #12]	@ (80007ec <HAL_IncTick+0x1c>)
 80007e0:	6013      	str	r3, [r2, #0]
}
 80007e2:	bf00      	nop
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr
 80007ec:	200000f4 	.word	0x200000f4
 80007f0:	20000008 	.word	0x20000008

080007f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  return uwTick;
 80007f8:	4b03      	ldr	r3, [pc, #12]	@ (8000808 <HAL_GetTick+0x14>)
 80007fa:	681b      	ldr	r3, [r3, #0]
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	200000f4 	.word	0x200000f4

0800080c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800080c:	b480      	push	{r7}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	f003 0307 	and.w	r3, r3, #7
 800081a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800081c:	4b0c      	ldr	r3, [pc, #48]	@ (8000850 <__NVIC_SetPriorityGrouping+0x44>)
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000822:	68ba      	ldr	r2, [r7, #8]
 8000824:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000828:	4013      	ands	r3, r2
 800082a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000834:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000838:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800083c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800083e:	4a04      	ldr	r2, [pc, #16]	@ (8000850 <__NVIC_SetPriorityGrouping+0x44>)
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	60d3      	str	r3, [r2, #12]
}
 8000844:	bf00      	nop
 8000846:	3714      	adds	r7, #20
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr
 8000850:	e000ed00 	.word	0xe000ed00

08000854 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000858:	4b04      	ldr	r3, [pc, #16]	@ (800086c <__NVIC_GetPriorityGrouping+0x18>)
 800085a:	68db      	ldr	r3, [r3, #12]
 800085c:	0a1b      	lsrs	r3, r3, #8
 800085e:	f003 0307 	and.w	r3, r3, #7
}
 8000862:	4618      	mov	r0, r3
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr
 800086c:	e000ed00 	.word	0xe000ed00

08000870 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800087a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087e:	2b00      	cmp	r3, #0
 8000880:	db0b      	blt.n	800089a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	f003 021f 	and.w	r2, r3, #31
 8000888:	4907      	ldr	r1, [pc, #28]	@ (80008a8 <__NVIC_EnableIRQ+0x38>)
 800088a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088e:	095b      	lsrs	r3, r3, #5
 8000890:	2001      	movs	r0, #1
 8000892:	fa00 f202 	lsl.w	r2, r0, r2
 8000896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800089a:	bf00      	nop
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	e000e100 	.word	0xe000e100

080008ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	6039      	str	r1, [r7, #0]
 80008b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	db0a      	blt.n	80008d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	b2da      	uxtb	r2, r3
 80008c4:	490c      	ldr	r1, [pc, #48]	@ (80008f8 <__NVIC_SetPriority+0x4c>)
 80008c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ca:	0112      	lsls	r2, r2, #4
 80008cc:	b2d2      	uxtb	r2, r2
 80008ce:	440b      	add	r3, r1
 80008d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008d4:	e00a      	b.n	80008ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	b2da      	uxtb	r2, r3
 80008da:	4908      	ldr	r1, [pc, #32]	@ (80008fc <__NVIC_SetPriority+0x50>)
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	f003 030f 	and.w	r3, r3, #15
 80008e2:	3b04      	subs	r3, #4
 80008e4:	0112      	lsls	r2, r2, #4
 80008e6:	b2d2      	uxtb	r2, r2
 80008e8:	440b      	add	r3, r1
 80008ea:	761a      	strb	r2, [r3, #24]
}
 80008ec:	bf00      	nop
 80008ee:	370c      	adds	r7, #12
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr
 80008f8:	e000e100 	.word	0xe000e100
 80008fc:	e000ed00 	.word	0xe000ed00

08000900 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000900:	b480      	push	{r7}
 8000902:	b089      	sub	sp, #36	@ 0x24
 8000904:	af00      	add	r7, sp, #0
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	60b9      	str	r1, [r7, #8]
 800090a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	f003 0307 	and.w	r3, r3, #7
 8000912:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000914:	69fb      	ldr	r3, [r7, #28]
 8000916:	f1c3 0307 	rsb	r3, r3, #7
 800091a:	2b04      	cmp	r3, #4
 800091c:	bf28      	it	cs
 800091e:	2304      	movcs	r3, #4
 8000920:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000922:	69fb      	ldr	r3, [r7, #28]
 8000924:	3304      	adds	r3, #4
 8000926:	2b06      	cmp	r3, #6
 8000928:	d902      	bls.n	8000930 <NVIC_EncodePriority+0x30>
 800092a:	69fb      	ldr	r3, [r7, #28]
 800092c:	3b03      	subs	r3, #3
 800092e:	e000      	b.n	8000932 <NVIC_EncodePriority+0x32>
 8000930:	2300      	movs	r3, #0
 8000932:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000934:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000938:	69bb      	ldr	r3, [r7, #24]
 800093a:	fa02 f303 	lsl.w	r3, r2, r3
 800093e:	43da      	mvns	r2, r3
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	401a      	ands	r2, r3
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000948:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	fa01 f303 	lsl.w	r3, r1, r3
 8000952:	43d9      	mvns	r1, r3
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000958:	4313      	orrs	r3, r2
         );
}
 800095a:	4618      	mov	r0, r3
 800095c:	3724      	adds	r7, #36	@ 0x24
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
	...

08000968 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	3b01      	subs	r3, #1
 8000974:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000978:	d301      	bcc.n	800097e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800097a:	2301      	movs	r3, #1
 800097c:	e00f      	b.n	800099e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800097e:	4a0a      	ldr	r2, [pc, #40]	@ (80009a8 <SysTick_Config+0x40>)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	3b01      	subs	r3, #1
 8000984:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000986:	210f      	movs	r1, #15
 8000988:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800098c:	f7ff ff8e 	bl	80008ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000990:	4b05      	ldr	r3, [pc, #20]	@ (80009a8 <SysTick_Config+0x40>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000996:	4b04      	ldr	r3, [pc, #16]	@ (80009a8 <SysTick_Config+0x40>)
 8000998:	2207      	movs	r2, #7
 800099a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800099c:	2300      	movs	r3, #0
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	e000e010 	.word	0xe000e010

080009ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009b4:	6878      	ldr	r0, [r7, #4]
 80009b6:	f7ff ff29 	bl	800080c <__NVIC_SetPriorityGrouping>
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	b086      	sub	sp, #24
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	4603      	mov	r3, r0
 80009ca:	60b9      	str	r1, [r7, #8]
 80009cc:	607a      	str	r2, [r7, #4]
 80009ce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80009d0:	f7ff ff40 	bl	8000854 <__NVIC_GetPriorityGrouping>
 80009d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009d6:	687a      	ldr	r2, [r7, #4]
 80009d8:	68b9      	ldr	r1, [r7, #8]
 80009da:	6978      	ldr	r0, [r7, #20]
 80009dc:	f7ff ff90 	bl	8000900 <NVIC_EncodePriority>
 80009e0:	4602      	mov	r2, r0
 80009e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009e6:	4611      	mov	r1, r2
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff ff5f 	bl	80008ac <__NVIC_SetPriority>
}
 80009ee:	bf00      	nop
 80009f0:	3718      	adds	r7, #24
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b082      	sub	sp, #8
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	4603      	mov	r3, r0
 80009fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff ff33 	bl	8000870 <__NVIC_EnableIRQ>
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b082      	sub	sp, #8
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a1a:	6878      	ldr	r0, [r7, #4]
 8000a1c:	f7ff ffa4 	bl	8000968 <SysTick_Config>
 8000a20:	4603      	mov	r3, r0
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	b084      	sub	sp, #16
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a32:	2300      	movs	r3, #0
 8000a34:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	2b02      	cmp	r3, #2
 8000a40:	d00d      	beq.n	8000a5e <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2204      	movs	r2, #4
 8000a46:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2200      	movs	r2, #0
 8000a54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	73fb      	strb	r3, [r7, #15]
 8000a5c:	e047      	b.n	8000aee <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f022 020e 	bic.w	r2, r2, #14
 8000a6c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f022 0201 	bic.w	r2, r2, #1
 8000a7c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000a8c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a92:	f003 021f 	and.w	r2, r3, #31
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	fa01 f202 	lsl.w	r2, r1, r2
 8000aa0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000aaa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d00c      	beq.n	8000ace <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000abe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000ac2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ac8:	687a      	ldr	r2, [r7, #4]
 8000aca:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000acc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2200      	movs	r2, #0
 8000ada:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d003      	beq.n	8000aee <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000aea:	6878      	ldr	r0, [r7, #4]
 8000aec:	4798      	blx	r3
    }
  }
  return status;
 8000aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3710      	adds	r7, #16
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b087      	sub	sp, #28
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000b02:	2300      	movs	r3, #0
 8000b04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000b06:	e15a      	b.n	8000dbe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	2101      	movs	r1, #1
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	fa01 f303 	lsl.w	r3, r1, r3
 8000b14:	4013      	ands	r3, r2
 8000b16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	f000 814c 	beq.w	8000db8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	f003 0303 	and.w	r3, r3, #3
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d005      	beq.n	8000b38 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b34:	2b02      	cmp	r3, #2
 8000b36:	d130      	bne.n	8000b9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	689b      	ldr	r3, [r3, #8]
 8000b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	2203      	movs	r2, #3
 8000b44:	fa02 f303 	lsl.w	r3, r2, r3
 8000b48:	43db      	mvns	r3, r3
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	68da      	ldr	r2, [r3, #12]
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5c:	693a      	ldr	r2, [r7, #16]
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	693a      	ldr	r2, [r7, #16]
 8000b66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b6e:	2201      	movs	r2, #1
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	fa02 f303 	lsl.w	r3, r2, r3
 8000b76:	43db      	mvns	r3, r3
 8000b78:	693a      	ldr	r2, [r7, #16]
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	091b      	lsrs	r3, r3, #4
 8000b84:	f003 0201 	and.w	r2, r3, #1
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	4313      	orrs	r3, r2
 8000b92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	f003 0303 	and.w	r3, r3, #3
 8000ba2:	2b03      	cmp	r3, #3
 8000ba4:	d017      	beq.n	8000bd6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	68db      	ldr	r3, [r3, #12]
 8000baa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	2203      	movs	r2, #3
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	43db      	mvns	r3, r3
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	4013      	ands	r3, r2
 8000bbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	689a      	ldr	r2, [r3, #8]
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	f003 0303 	and.w	r3, r3, #3
 8000bde:	2b02      	cmp	r3, #2
 8000be0:	d123      	bne.n	8000c2a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	08da      	lsrs	r2, r3, #3
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	3208      	adds	r2, #8
 8000bea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	f003 0307 	and.w	r3, r3, #7
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	220f      	movs	r2, #15
 8000bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfe:	43db      	mvns	r3, r3
 8000c00:	693a      	ldr	r2, [r7, #16]
 8000c02:	4013      	ands	r3, r2
 8000c04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	691a      	ldr	r2, [r3, #16]
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	f003 0307 	and.w	r3, r3, #7
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	fa02 f303 	lsl.w	r3, r2, r3
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	08da      	lsrs	r2, r3, #3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	3208      	adds	r2, #8
 8000c24:	6939      	ldr	r1, [r7, #16]
 8000c26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	2203      	movs	r2, #3
 8000c36:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3a:	43db      	mvns	r3, r3
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	4013      	ands	r3, r2
 8000c40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	f003 0203 	and.w	r2, r3, #3
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	f000 80a6 	beq.w	8000db8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6c:	4b5b      	ldr	r3, [pc, #364]	@ (8000ddc <HAL_GPIO_Init+0x2e4>)
 8000c6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c70:	4a5a      	ldr	r2, [pc, #360]	@ (8000ddc <HAL_GPIO_Init+0x2e4>)
 8000c72:	f043 0301 	orr.w	r3, r3, #1
 8000c76:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c78:	4b58      	ldr	r3, [pc, #352]	@ (8000ddc <HAL_GPIO_Init+0x2e4>)
 8000c7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c7c:	f003 0301 	and.w	r3, r3, #1
 8000c80:	60bb      	str	r3, [r7, #8]
 8000c82:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c84:	4a56      	ldr	r2, [pc, #344]	@ (8000de0 <HAL_GPIO_Init+0x2e8>)
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	089b      	lsrs	r3, r3, #2
 8000c8a:	3302      	adds	r3, #2
 8000c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	f003 0303 	and.w	r3, r3, #3
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	220f      	movs	r2, #15
 8000c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca0:	43db      	mvns	r3, r3
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000cae:	d01f      	beq.n	8000cf0 <HAL_GPIO_Init+0x1f8>
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	4a4c      	ldr	r2, [pc, #304]	@ (8000de4 <HAL_GPIO_Init+0x2ec>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d019      	beq.n	8000cec <HAL_GPIO_Init+0x1f4>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	4a4b      	ldr	r2, [pc, #300]	@ (8000de8 <HAL_GPIO_Init+0x2f0>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d013      	beq.n	8000ce8 <HAL_GPIO_Init+0x1f0>
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4a4a      	ldr	r2, [pc, #296]	@ (8000dec <HAL_GPIO_Init+0x2f4>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d00d      	beq.n	8000ce4 <HAL_GPIO_Init+0x1ec>
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4a49      	ldr	r2, [pc, #292]	@ (8000df0 <HAL_GPIO_Init+0x2f8>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d007      	beq.n	8000ce0 <HAL_GPIO_Init+0x1e8>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4a48      	ldr	r2, [pc, #288]	@ (8000df4 <HAL_GPIO_Init+0x2fc>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d101      	bne.n	8000cdc <HAL_GPIO_Init+0x1e4>
 8000cd8:	2305      	movs	r3, #5
 8000cda:	e00a      	b.n	8000cf2 <HAL_GPIO_Init+0x1fa>
 8000cdc:	2306      	movs	r3, #6
 8000cde:	e008      	b.n	8000cf2 <HAL_GPIO_Init+0x1fa>
 8000ce0:	2304      	movs	r3, #4
 8000ce2:	e006      	b.n	8000cf2 <HAL_GPIO_Init+0x1fa>
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	e004      	b.n	8000cf2 <HAL_GPIO_Init+0x1fa>
 8000ce8:	2302      	movs	r3, #2
 8000cea:	e002      	b.n	8000cf2 <HAL_GPIO_Init+0x1fa>
 8000cec:	2301      	movs	r3, #1
 8000cee:	e000      	b.n	8000cf2 <HAL_GPIO_Init+0x1fa>
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	697a      	ldr	r2, [r7, #20]
 8000cf4:	f002 0203 	and.w	r2, r2, #3
 8000cf8:	0092      	lsls	r2, r2, #2
 8000cfa:	4093      	lsls	r3, r2
 8000cfc:	693a      	ldr	r2, [r7, #16]
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d02:	4937      	ldr	r1, [pc, #220]	@ (8000de0 <HAL_GPIO_Init+0x2e8>)
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	089b      	lsrs	r3, r3, #2
 8000d08:	3302      	adds	r3, #2
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d10:	4b39      	ldr	r3, [pc, #228]	@ (8000df8 <HAL_GPIO_Init+0x300>)
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	43db      	mvns	r3, r3
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d003      	beq.n	8000d34 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000d2c:	693a      	ldr	r2, [r7, #16]
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d34:	4a30      	ldr	r2, [pc, #192]	@ (8000df8 <HAL_GPIO_Init+0x300>)
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000d3a:	4b2f      	ldr	r3, [pc, #188]	@ (8000df8 <HAL_GPIO_Init+0x300>)
 8000d3c:	68db      	ldr	r3, [r3, #12]
 8000d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	43db      	mvns	r3, r3
 8000d44:	693a      	ldr	r2, [r7, #16]
 8000d46:	4013      	ands	r3, r2
 8000d48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d003      	beq.n	8000d5e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000d5e:	4a26      	ldr	r2, [pc, #152]	@ (8000df8 <HAL_GPIO_Init+0x300>)
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000d64:	4b24      	ldr	r3, [pc, #144]	@ (8000df8 <HAL_GPIO_Init+0x300>)
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	4013      	ands	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d003      	beq.n	8000d88 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d88:	4a1b      	ldr	r2, [pc, #108]	@ (8000df8 <HAL_GPIO_Init+0x300>)
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000d8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000df8 <HAL_GPIO_Init+0x300>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	43db      	mvns	r3, r3
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d003      	beq.n	8000db2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000db2:	4a11      	ldr	r2, [pc, #68]	@ (8000df8 <HAL_GPIO_Init+0x300>)
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	f47f ae9d 	bne.w	8000b08 <HAL_GPIO_Init+0x10>
  }
}
 8000dce:	bf00      	nop
 8000dd0:	bf00      	nop
 8000dd2:	371c      	adds	r7, #28
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	40010000 	.word	0x40010000
 8000de4:	48000400 	.word	0x48000400
 8000de8:	48000800 	.word	0x48000800
 8000dec:	48000c00 	.word	0x48000c00
 8000df0:	48001000 	.word	0x48001000
 8000df4:	48001400 	.word	0x48001400
 8000df8:	40010400 	.word	0x40010400

08000dfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	460b      	mov	r3, r1
 8000e06:	807b      	strh	r3, [r7, #2]
 8000e08:	4613      	mov	r3, r2
 8000e0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e0c:	787b      	ldrb	r3, [r7, #1]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d003      	beq.n	8000e1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e12:	887a      	ldrh	r2, [r7, #2]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e18:	e002      	b.n	8000e20 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e1a:	887a      	ldrh	r2, [r7, #2]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	460b      	mov	r3, r1
 8000e36:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	695b      	ldr	r3, [r3, #20]
 8000e3c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e3e:	887a      	ldrh	r2, [r7, #2]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	4013      	ands	r3, r2
 8000e44:	041a      	lsls	r2, r3, #16
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	43d9      	mvns	r1, r3
 8000e4a:	887b      	ldrh	r3, [r7, #2]
 8000e4c:	400b      	ands	r3, r1
 8000e4e:	431a      	orrs	r2, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	619a      	str	r2, [r3, #24]
}
 8000e54:	bf00      	nop
 8000e56:	3714      	adds	r7, #20
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d141      	bne.n	8000ef2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e6e:	4b4b      	ldr	r3, [pc, #300]	@ (8000f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000e76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e7a:	d131      	bne.n	8000ee0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000e7c:	4b47      	ldr	r3, [pc, #284]	@ (8000f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e82:	4a46      	ldr	r2, [pc, #280]	@ (8000f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000e88:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e8c:	4b43      	ldr	r3, [pc, #268]	@ (8000f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000e94:	4a41      	ldr	r2, [pc, #260]	@ (8000f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e9a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e9c:	4b40      	ldr	r3, [pc, #256]	@ (8000fa0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2232      	movs	r2, #50	@ 0x32
 8000ea2:	fb02 f303 	mul.w	r3, r2, r3
 8000ea6:	4a3f      	ldr	r2, [pc, #252]	@ (8000fa4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8000eac:	0c9b      	lsrs	r3, r3, #18
 8000eae:	3301      	adds	r3, #1
 8000eb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000eb2:	e002      	b.n	8000eba <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000eba:	4b38      	ldr	r3, [pc, #224]	@ (8000f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ebc:	695b      	ldr	r3, [r3, #20]
 8000ebe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ec2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000ec6:	d102      	bne.n	8000ece <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d1f2      	bne.n	8000eb4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ece:	4b33      	ldr	r3, [pc, #204]	@ (8000f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ed0:	695b      	ldr	r3, [r3, #20]
 8000ed2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ed6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000eda:	d158      	bne.n	8000f8e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000edc:	2303      	movs	r3, #3
 8000ede:	e057      	b.n	8000f90 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000ee0:	4b2e      	ldr	r3, [pc, #184]	@ (8000f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ee6:	4a2d      	ldr	r2, [pc, #180]	@ (8000f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ee8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000eec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000ef0:	e04d      	b.n	8000f8e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000ef8:	d141      	bne.n	8000f7e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000efa:	4b28      	ldr	r3, [pc, #160]	@ (8000f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000f02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f06:	d131      	bne.n	8000f6c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000f08:	4b24      	ldr	r3, [pc, #144]	@ (8000f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f0e:	4a23      	ldr	r2, [pc, #140]	@ (8000f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f14:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f18:	4b20      	ldr	r3, [pc, #128]	@ (8000f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000f20:	4a1e      	ldr	r2, [pc, #120]	@ (8000f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f26:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000f28:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2232      	movs	r2, #50	@ 0x32
 8000f2e:	fb02 f303 	mul.w	r3, r2, r3
 8000f32:	4a1c      	ldr	r2, [pc, #112]	@ (8000fa4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000f34:	fba2 2303 	umull	r2, r3, r2, r3
 8000f38:	0c9b      	lsrs	r3, r3, #18
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f3e:	e002      	b.n	8000f46 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f46:	4b15      	ldr	r3, [pc, #84]	@ (8000f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f48:	695b      	ldr	r3, [r3, #20]
 8000f4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f52:	d102      	bne.n	8000f5a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d1f2      	bne.n	8000f40 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f5a:	4b10      	ldr	r3, [pc, #64]	@ (8000f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f66:	d112      	bne.n	8000f8e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	e011      	b.n	8000f90 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f72:	4a0a      	ldr	r2, [pc, #40]	@ (8000f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f78:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000f7c:	e007      	b.n	8000f8e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f7e:	4b07      	ldr	r3, [pc, #28]	@ (8000f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000f86:	4a05      	ldr	r2, [pc, #20]	@ (8000f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f88:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f8c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000f8e:	2300      	movs	r3, #0
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	40007000 	.word	0x40007000
 8000fa0:	20000000 	.word	0x20000000
 8000fa4:	431bde83 	.word	0x431bde83

08000fa8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000fac:	4b05      	ldr	r3, [pc, #20]	@ (8000fc4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	4a04      	ldr	r2, [pc, #16]	@ (8000fc4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000fb2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fb6:	6093      	str	r3, [r2, #8]
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	40007000 	.word	0x40007000

08000fc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b088      	sub	sp, #32
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d101      	bne.n	8000fda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e2fe      	b.n	80015d8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d075      	beq.n	80010d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fe6:	4b97      	ldr	r3, [pc, #604]	@ (8001244 <HAL_RCC_OscConfig+0x27c>)
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	f003 030c 	and.w	r3, r3, #12
 8000fee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ff0:	4b94      	ldr	r3, [pc, #592]	@ (8001244 <HAL_RCC_OscConfig+0x27c>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	f003 0303 	and.w	r3, r3, #3
 8000ff8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	2b0c      	cmp	r3, #12
 8000ffe:	d102      	bne.n	8001006 <HAL_RCC_OscConfig+0x3e>
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	2b03      	cmp	r3, #3
 8001004:	d002      	beq.n	800100c <HAL_RCC_OscConfig+0x44>
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	2b08      	cmp	r3, #8
 800100a:	d10b      	bne.n	8001024 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800100c:	4b8d      	ldr	r3, [pc, #564]	@ (8001244 <HAL_RCC_OscConfig+0x27c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001014:	2b00      	cmp	r3, #0
 8001016:	d05b      	beq.n	80010d0 <HAL_RCC_OscConfig+0x108>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d157      	bne.n	80010d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	e2d9      	b.n	80015d8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800102c:	d106      	bne.n	800103c <HAL_RCC_OscConfig+0x74>
 800102e:	4b85      	ldr	r3, [pc, #532]	@ (8001244 <HAL_RCC_OscConfig+0x27c>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a84      	ldr	r2, [pc, #528]	@ (8001244 <HAL_RCC_OscConfig+0x27c>)
 8001034:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001038:	6013      	str	r3, [r2, #0]
 800103a:	e01d      	b.n	8001078 <HAL_RCC_OscConfig+0xb0>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001044:	d10c      	bne.n	8001060 <HAL_RCC_OscConfig+0x98>
 8001046:	4b7f      	ldr	r3, [pc, #508]	@ (8001244 <HAL_RCC_OscConfig+0x27c>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a7e      	ldr	r2, [pc, #504]	@ (8001244 <HAL_RCC_OscConfig+0x27c>)
 800104c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001050:	6013      	str	r3, [r2, #0]
 8001052:	4b7c      	ldr	r3, [pc, #496]	@ (8001244 <HAL_RCC_OscConfig+0x27c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a7b      	ldr	r2, [pc, #492]	@ (8001244 <HAL_RCC_OscConfig+0x27c>)
 8001058:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800105c:	6013      	str	r3, [r2, #0]
 800105e:	e00b      	b.n	8001078 <HAL_RCC_OscConfig+0xb0>
 8001060:	4b78      	ldr	r3, [pc, #480]	@ (8001244 <HAL_RCC_OscConfig+0x27c>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a77      	ldr	r2, [pc, #476]	@ (8001244 <HAL_RCC_OscConfig+0x27c>)
 8001066:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800106a:	6013      	str	r3, [r2, #0]
 800106c:	4b75      	ldr	r3, [pc, #468]	@ (8001244 <HAL_RCC_OscConfig+0x27c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a74      	ldr	r2, [pc, #464]	@ (8001244 <HAL_RCC_OscConfig+0x27c>)
 8001072:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001076:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d013      	beq.n	80010a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001080:	f7ff fbb8 	bl	80007f4 <HAL_GetTick>
 8001084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001086:	e008      	b.n	800109a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001088:	f7ff fbb4 	bl	80007f4 <HAL_GetTick>
 800108c:	4602      	mov	r2, r0
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	2b64      	cmp	r3, #100	@ 0x64
 8001094:	d901      	bls.n	800109a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001096:	2303      	movs	r3, #3
 8001098:	e29e      	b.n	80015d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800109a:	4b6a      	ldr	r3, [pc, #424]	@ (8001244 <HAL_RCC_OscConfig+0x27c>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d0f0      	beq.n	8001088 <HAL_RCC_OscConfig+0xc0>
 80010a6:	e014      	b.n	80010d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010a8:	f7ff fba4 	bl	80007f4 <HAL_GetTick>
 80010ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010ae:	e008      	b.n	80010c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010b0:	f7ff fba0 	bl	80007f4 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	2b64      	cmp	r3, #100	@ 0x64
 80010bc:	d901      	bls.n	80010c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010be:	2303      	movs	r3, #3
 80010c0:	e28a      	b.n	80015d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010c2:	4b60      	ldr	r3, [pc, #384]	@ (8001244 <HAL_RCC_OscConfig+0x27c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d1f0      	bne.n	80010b0 <HAL_RCC_OscConfig+0xe8>
 80010ce:	e000      	b.n	80010d2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 0302 	and.w	r3, r3, #2
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d075      	beq.n	80011ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010de:	4b59      	ldr	r3, [pc, #356]	@ (8001244 <HAL_RCC_OscConfig+0x27c>)
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	f003 030c 	and.w	r3, r3, #12
 80010e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010e8:	4b56      	ldr	r3, [pc, #344]	@ (8001244 <HAL_RCC_OscConfig+0x27c>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	f003 0303 	and.w	r3, r3, #3
 80010f0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	2b0c      	cmp	r3, #12
 80010f6:	d102      	bne.n	80010fe <HAL_RCC_OscConfig+0x136>
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d002      	beq.n	8001104 <HAL_RCC_OscConfig+0x13c>
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	2b04      	cmp	r3, #4
 8001102:	d11f      	bne.n	8001144 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001104:	4b4f      	ldr	r3, [pc, #316]	@ (8001244 <HAL_RCC_OscConfig+0x27c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800110c:	2b00      	cmp	r3, #0
 800110e:	d005      	beq.n	800111c <HAL_RCC_OscConfig+0x154>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d101      	bne.n	800111c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	e25d      	b.n	80015d8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800111c:	4b49      	ldr	r3, [pc, #292]	@ (8001244 <HAL_RCC_OscConfig+0x27c>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	691b      	ldr	r3, [r3, #16]
 8001128:	061b      	lsls	r3, r3, #24
 800112a:	4946      	ldr	r1, [pc, #280]	@ (8001244 <HAL_RCC_OscConfig+0x27c>)
 800112c:	4313      	orrs	r3, r2
 800112e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001130:	4b45      	ldr	r3, [pc, #276]	@ (8001248 <HAL_RCC_OscConfig+0x280>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff fb11 	bl	800075c <HAL_InitTick>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d043      	beq.n	80011c8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	e249      	b.n	80015d8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d023      	beq.n	8001194 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800114c:	4b3d      	ldr	r3, [pc, #244]	@ (8001244 <HAL_RCC_OscConfig+0x27c>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a3c      	ldr	r2, [pc, #240]	@ (8001244 <HAL_RCC_OscConfig+0x27c>)
 8001152:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001156:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001158:	f7ff fb4c 	bl	80007f4 <HAL_GetTick>
 800115c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800115e:	e008      	b.n	8001172 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001160:	f7ff fb48 	bl	80007f4 <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	2b02      	cmp	r3, #2
 800116c:	d901      	bls.n	8001172 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800116e:	2303      	movs	r3, #3
 8001170:	e232      	b.n	80015d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001172:	4b34      	ldr	r3, [pc, #208]	@ (8001244 <HAL_RCC_OscConfig+0x27c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800117a:	2b00      	cmp	r3, #0
 800117c:	d0f0      	beq.n	8001160 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800117e:	4b31      	ldr	r3, [pc, #196]	@ (8001244 <HAL_RCC_OscConfig+0x27c>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	691b      	ldr	r3, [r3, #16]
 800118a:	061b      	lsls	r3, r3, #24
 800118c:	492d      	ldr	r1, [pc, #180]	@ (8001244 <HAL_RCC_OscConfig+0x27c>)
 800118e:	4313      	orrs	r3, r2
 8001190:	604b      	str	r3, [r1, #4]
 8001192:	e01a      	b.n	80011ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001194:	4b2b      	ldr	r3, [pc, #172]	@ (8001244 <HAL_RCC_OscConfig+0x27c>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a2a      	ldr	r2, [pc, #168]	@ (8001244 <HAL_RCC_OscConfig+0x27c>)
 800119a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800119e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011a0:	f7ff fb28 	bl	80007f4 <HAL_GetTick>
 80011a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011a6:	e008      	b.n	80011ba <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011a8:	f7ff fb24 	bl	80007f4 <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d901      	bls.n	80011ba <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80011b6:	2303      	movs	r3, #3
 80011b8:	e20e      	b.n	80015d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011ba:	4b22      	ldr	r3, [pc, #136]	@ (8001244 <HAL_RCC_OscConfig+0x27c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d1f0      	bne.n	80011a8 <HAL_RCC_OscConfig+0x1e0>
 80011c6:	e000      	b.n	80011ca <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011c8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0308 	and.w	r3, r3, #8
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d041      	beq.n	800125a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	695b      	ldr	r3, [r3, #20]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d01c      	beq.n	8001218 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011de:	4b19      	ldr	r3, [pc, #100]	@ (8001244 <HAL_RCC_OscConfig+0x27c>)
 80011e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80011e4:	4a17      	ldr	r2, [pc, #92]	@ (8001244 <HAL_RCC_OscConfig+0x27c>)
 80011e6:	f043 0301 	orr.w	r3, r3, #1
 80011ea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011ee:	f7ff fb01 	bl	80007f4 <HAL_GetTick>
 80011f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011f4:	e008      	b.n	8001208 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011f6:	f7ff fafd 	bl	80007f4 <HAL_GetTick>
 80011fa:	4602      	mov	r2, r0
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	2b02      	cmp	r3, #2
 8001202:	d901      	bls.n	8001208 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001204:	2303      	movs	r3, #3
 8001206:	e1e7      	b.n	80015d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001208:	4b0e      	ldr	r3, [pc, #56]	@ (8001244 <HAL_RCC_OscConfig+0x27c>)
 800120a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	2b00      	cmp	r3, #0
 8001214:	d0ef      	beq.n	80011f6 <HAL_RCC_OscConfig+0x22e>
 8001216:	e020      	b.n	800125a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001218:	4b0a      	ldr	r3, [pc, #40]	@ (8001244 <HAL_RCC_OscConfig+0x27c>)
 800121a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800121e:	4a09      	ldr	r2, [pc, #36]	@ (8001244 <HAL_RCC_OscConfig+0x27c>)
 8001220:	f023 0301 	bic.w	r3, r3, #1
 8001224:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001228:	f7ff fae4 	bl	80007f4 <HAL_GetTick>
 800122c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800122e:	e00d      	b.n	800124c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001230:	f7ff fae0 	bl	80007f4 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b02      	cmp	r3, #2
 800123c:	d906      	bls.n	800124c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e1ca      	b.n	80015d8 <HAL_RCC_OscConfig+0x610>
 8001242:	bf00      	nop
 8001244:	40021000 	.word	0x40021000
 8001248:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800124c:	4b8c      	ldr	r3, [pc, #560]	@ (8001480 <HAL_RCC_OscConfig+0x4b8>)
 800124e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	2b00      	cmp	r3, #0
 8001258:	d1ea      	bne.n	8001230 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0304 	and.w	r3, r3, #4
 8001262:	2b00      	cmp	r3, #0
 8001264:	f000 80a6 	beq.w	80013b4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001268:	2300      	movs	r3, #0
 800126a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800126c:	4b84      	ldr	r3, [pc, #528]	@ (8001480 <HAL_RCC_OscConfig+0x4b8>)
 800126e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001270:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d101      	bne.n	800127c <HAL_RCC_OscConfig+0x2b4>
 8001278:	2301      	movs	r3, #1
 800127a:	e000      	b.n	800127e <HAL_RCC_OscConfig+0x2b6>
 800127c:	2300      	movs	r3, #0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d00d      	beq.n	800129e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001282:	4b7f      	ldr	r3, [pc, #508]	@ (8001480 <HAL_RCC_OscConfig+0x4b8>)
 8001284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001286:	4a7e      	ldr	r2, [pc, #504]	@ (8001480 <HAL_RCC_OscConfig+0x4b8>)
 8001288:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800128c:	6593      	str	r3, [r2, #88]	@ 0x58
 800128e:	4b7c      	ldr	r3, [pc, #496]	@ (8001480 <HAL_RCC_OscConfig+0x4b8>)
 8001290:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001292:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800129a:	2301      	movs	r3, #1
 800129c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800129e:	4b79      	ldr	r3, [pc, #484]	@ (8001484 <HAL_RCC_OscConfig+0x4bc>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d118      	bne.n	80012dc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012aa:	4b76      	ldr	r3, [pc, #472]	@ (8001484 <HAL_RCC_OscConfig+0x4bc>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a75      	ldr	r2, [pc, #468]	@ (8001484 <HAL_RCC_OscConfig+0x4bc>)
 80012b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012b6:	f7ff fa9d 	bl	80007f4 <HAL_GetTick>
 80012ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012bc:	e008      	b.n	80012d0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012be:	f7ff fa99 	bl	80007f4 <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d901      	bls.n	80012d0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80012cc:	2303      	movs	r3, #3
 80012ce:	e183      	b.n	80015d8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012d0:	4b6c      	ldr	r3, [pc, #432]	@ (8001484 <HAL_RCC_OscConfig+0x4bc>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d0f0      	beq.n	80012be <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d108      	bne.n	80012f6 <HAL_RCC_OscConfig+0x32e>
 80012e4:	4b66      	ldr	r3, [pc, #408]	@ (8001480 <HAL_RCC_OscConfig+0x4b8>)
 80012e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80012ea:	4a65      	ldr	r2, [pc, #404]	@ (8001480 <HAL_RCC_OscConfig+0x4b8>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80012f4:	e024      	b.n	8001340 <HAL_RCC_OscConfig+0x378>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	2b05      	cmp	r3, #5
 80012fc:	d110      	bne.n	8001320 <HAL_RCC_OscConfig+0x358>
 80012fe:	4b60      	ldr	r3, [pc, #384]	@ (8001480 <HAL_RCC_OscConfig+0x4b8>)
 8001300:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001304:	4a5e      	ldr	r2, [pc, #376]	@ (8001480 <HAL_RCC_OscConfig+0x4b8>)
 8001306:	f043 0304 	orr.w	r3, r3, #4
 800130a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800130e:	4b5c      	ldr	r3, [pc, #368]	@ (8001480 <HAL_RCC_OscConfig+0x4b8>)
 8001310:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001314:	4a5a      	ldr	r2, [pc, #360]	@ (8001480 <HAL_RCC_OscConfig+0x4b8>)
 8001316:	f043 0301 	orr.w	r3, r3, #1
 800131a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800131e:	e00f      	b.n	8001340 <HAL_RCC_OscConfig+0x378>
 8001320:	4b57      	ldr	r3, [pc, #348]	@ (8001480 <HAL_RCC_OscConfig+0x4b8>)
 8001322:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001326:	4a56      	ldr	r2, [pc, #344]	@ (8001480 <HAL_RCC_OscConfig+0x4b8>)
 8001328:	f023 0301 	bic.w	r3, r3, #1
 800132c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001330:	4b53      	ldr	r3, [pc, #332]	@ (8001480 <HAL_RCC_OscConfig+0x4b8>)
 8001332:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001336:	4a52      	ldr	r2, [pc, #328]	@ (8001480 <HAL_RCC_OscConfig+0x4b8>)
 8001338:	f023 0304 	bic.w	r3, r3, #4
 800133c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d016      	beq.n	8001376 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001348:	f7ff fa54 	bl	80007f4 <HAL_GetTick>
 800134c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800134e:	e00a      	b.n	8001366 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001350:	f7ff fa50 	bl	80007f4 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800135e:	4293      	cmp	r3, r2
 8001360:	d901      	bls.n	8001366 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e138      	b.n	80015d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001366:	4b46      	ldr	r3, [pc, #280]	@ (8001480 <HAL_RCC_OscConfig+0x4b8>)
 8001368:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800136c:	f003 0302 	and.w	r3, r3, #2
 8001370:	2b00      	cmp	r3, #0
 8001372:	d0ed      	beq.n	8001350 <HAL_RCC_OscConfig+0x388>
 8001374:	e015      	b.n	80013a2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001376:	f7ff fa3d 	bl	80007f4 <HAL_GetTick>
 800137a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800137c:	e00a      	b.n	8001394 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800137e:	f7ff fa39 	bl	80007f4 <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	f241 3288 	movw	r2, #5000	@ 0x1388
 800138c:	4293      	cmp	r3, r2
 800138e:	d901      	bls.n	8001394 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001390:	2303      	movs	r3, #3
 8001392:	e121      	b.n	80015d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001394:	4b3a      	ldr	r3, [pc, #232]	@ (8001480 <HAL_RCC_OscConfig+0x4b8>)
 8001396:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d1ed      	bne.n	800137e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80013a2:	7ffb      	ldrb	r3, [r7, #31]
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d105      	bne.n	80013b4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013a8:	4b35      	ldr	r3, [pc, #212]	@ (8001480 <HAL_RCC_OscConfig+0x4b8>)
 80013aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013ac:	4a34      	ldr	r2, [pc, #208]	@ (8001480 <HAL_RCC_OscConfig+0x4b8>)
 80013ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80013b2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0320 	and.w	r3, r3, #32
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d03c      	beq.n	800143a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d01c      	beq.n	8001402 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80013c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001480 <HAL_RCC_OscConfig+0x4b8>)
 80013ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80013ce:	4a2c      	ldr	r2, [pc, #176]	@ (8001480 <HAL_RCC_OscConfig+0x4b8>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d8:	f7ff fa0c 	bl	80007f4 <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80013de:	e008      	b.n	80013f2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013e0:	f7ff fa08 	bl	80007f4 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e0f2      	b.n	80015d8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80013f2:	4b23      	ldr	r3, [pc, #140]	@ (8001480 <HAL_RCC_OscConfig+0x4b8>)
 80013f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d0ef      	beq.n	80013e0 <HAL_RCC_OscConfig+0x418>
 8001400:	e01b      	b.n	800143a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001402:	4b1f      	ldr	r3, [pc, #124]	@ (8001480 <HAL_RCC_OscConfig+0x4b8>)
 8001404:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001408:	4a1d      	ldr	r2, [pc, #116]	@ (8001480 <HAL_RCC_OscConfig+0x4b8>)
 800140a:	f023 0301 	bic.w	r3, r3, #1
 800140e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001412:	f7ff f9ef 	bl	80007f4 <HAL_GetTick>
 8001416:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001418:	e008      	b.n	800142c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800141a:	f7ff f9eb 	bl	80007f4 <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	2b02      	cmp	r3, #2
 8001426:	d901      	bls.n	800142c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001428:	2303      	movs	r3, #3
 800142a:	e0d5      	b.n	80015d8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800142c:	4b14      	ldr	r3, [pc, #80]	@ (8001480 <HAL_RCC_OscConfig+0x4b8>)
 800142e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1ef      	bne.n	800141a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	69db      	ldr	r3, [r3, #28]
 800143e:	2b00      	cmp	r3, #0
 8001440:	f000 80c9 	beq.w	80015d6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001444:	4b0e      	ldr	r3, [pc, #56]	@ (8001480 <HAL_RCC_OscConfig+0x4b8>)
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	f003 030c 	and.w	r3, r3, #12
 800144c:	2b0c      	cmp	r3, #12
 800144e:	f000 8083 	beq.w	8001558 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	69db      	ldr	r3, [r3, #28]
 8001456:	2b02      	cmp	r3, #2
 8001458:	d15e      	bne.n	8001518 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800145a:	4b09      	ldr	r3, [pc, #36]	@ (8001480 <HAL_RCC_OscConfig+0x4b8>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a08      	ldr	r2, [pc, #32]	@ (8001480 <HAL_RCC_OscConfig+0x4b8>)
 8001460:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001464:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001466:	f7ff f9c5 	bl	80007f4 <HAL_GetTick>
 800146a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800146c:	e00c      	b.n	8001488 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800146e:	f7ff f9c1 	bl	80007f4 <HAL_GetTick>
 8001472:	4602      	mov	r2, r0
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d905      	bls.n	8001488 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e0ab      	b.n	80015d8 <HAL_RCC_OscConfig+0x610>
 8001480:	40021000 	.word	0x40021000
 8001484:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001488:	4b55      	ldr	r3, [pc, #340]	@ (80015e0 <HAL_RCC_OscConfig+0x618>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d1ec      	bne.n	800146e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001494:	4b52      	ldr	r3, [pc, #328]	@ (80015e0 <HAL_RCC_OscConfig+0x618>)
 8001496:	68da      	ldr	r2, [r3, #12]
 8001498:	4b52      	ldr	r3, [pc, #328]	@ (80015e4 <HAL_RCC_OscConfig+0x61c>)
 800149a:	4013      	ands	r3, r2
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	6a11      	ldr	r1, [r2, #32]
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80014a4:	3a01      	subs	r2, #1
 80014a6:	0112      	lsls	r2, r2, #4
 80014a8:	4311      	orrs	r1, r2
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80014ae:	0212      	lsls	r2, r2, #8
 80014b0:	4311      	orrs	r1, r2
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80014b6:	0852      	lsrs	r2, r2, #1
 80014b8:	3a01      	subs	r2, #1
 80014ba:	0552      	lsls	r2, r2, #21
 80014bc:	4311      	orrs	r1, r2
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80014c2:	0852      	lsrs	r2, r2, #1
 80014c4:	3a01      	subs	r2, #1
 80014c6:	0652      	lsls	r2, r2, #25
 80014c8:	4311      	orrs	r1, r2
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80014ce:	06d2      	lsls	r2, r2, #27
 80014d0:	430a      	orrs	r2, r1
 80014d2:	4943      	ldr	r1, [pc, #268]	@ (80015e0 <HAL_RCC_OscConfig+0x618>)
 80014d4:	4313      	orrs	r3, r2
 80014d6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014d8:	4b41      	ldr	r3, [pc, #260]	@ (80015e0 <HAL_RCC_OscConfig+0x618>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a40      	ldr	r2, [pc, #256]	@ (80015e0 <HAL_RCC_OscConfig+0x618>)
 80014de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80014e2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80014e4:	4b3e      	ldr	r3, [pc, #248]	@ (80015e0 <HAL_RCC_OscConfig+0x618>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	4a3d      	ldr	r2, [pc, #244]	@ (80015e0 <HAL_RCC_OscConfig+0x618>)
 80014ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80014ee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f0:	f7ff f980 	bl	80007f4 <HAL_GetTick>
 80014f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014f6:	e008      	b.n	800150a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014f8:	f7ff f97c 	bl	80007f4 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b02      	cmp	r3, #2
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e066      	b.n	80015d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800150a:	4b35      	ldr	r3, [pc, #212]	@ (80015e0 <HAL_RCC_OscConfig+0x618>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d0f0      	beq.n	80014f8 <HAL_RCC_OscConfig+0x530>
 8001516:	e05e      	b.n	80015d6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001518:	4b31      	ldr	r3, [pc, #196]	@ (80015e0 <HAL_RCC_OscConfig+0x618>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a30      	ldr	r2, [pc, #192]	@ (80015e0 <HAL_RCC_OscConfig+0x618>)
 800151e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001522:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001524:	f7ff f966 	bl	80007f4 <HAL_GetTick>
 8001528:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800152a:	e008      	b.n	800153e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800152c:	f7ff f962 	bl	80007f4 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e04c      	b.n	80015d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800153e:	4b28      	ldr	r3, [pc, #160]	@ (80015e0 <HAL_RCC_OscConfig+0x618>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d1f0      	bne.n	800152c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800154a:	4b25      	ldr	r3, [pc, #148]	@ (80015e0 <HAL_RCC_OscConfig+0x618>)
 800154c:	68da      	ldr	r2, [r3, #12]
 800154e:	4924      	ldr	r1, [pc, #144]	@ (80015e0 <HAL_RCC_OscConfig+0x618>)
 8001550:	4b25      	ldr	r3, [pc, #148]	@ (80015e8 <HAL_RCC_OscConfig+0x620>)
 8001552:	4013      	ands	r3, r2
 8001554:	60cb      	str	r3, [r1, #12]
 8001556:	e03e      	b.n	80015d6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	69db      	ldr	r3, [r3, #28]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d101      	bne.n	8001564 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e039      	b.n	80015d8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001564:	4b1e      	ldr	r3, [pc, #120]	@ (80015e0 <HAL_RCC_OscConfig+0x618>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	f003 0203 	and.w	r2, r3, #3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a1b      	ldr	r3, [r3, #32]
 8001574:	429a      	cmp	r2, r3
 8001576:	d12c      	bne.n	80015d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001582:	3b01      	subs	r3, #1
 8001584:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001586:	429a      	cmp	r2, r3
 8001588:	d123      	bne.n	80015d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001594:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001596:	429a      	cmp	r2, r3
 8001598:	d11b      	bne.n	80015d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015a4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d113      	bne.n	80015d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b4:	085b      	lsrs	r3, r3, #1
 80015b6:	3b01      	subs	r3, #1
 80015b8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d109      	bne.n	80015d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015c8:	085b      	lsrs	r3, r3, #1
 80015ca:	3b01      	subs	r3, #1
 80015cc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d001      	beq.n	80015d6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e000      	b.n	80015d8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80015d6:	2300      	movs	r3, #0
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3720      	adds	r7, #32
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40021000 	.word	0x40021000
 80015e4:	019f800c 	.word	0x019f800c
 80015e8:	feeefffc 	.word	0xfeeefffc

080015ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80015f6:	2300      	movs	r3, #0
 80015f8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d101      	bne.n	8001604 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e11e      	b.n	8001842 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001604:	4b91      	ldr	r3, [pc, #580]	@ (800184c <HAL_RCC_ClockConfig+0x260>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 030f 	and.w	r3, r3, #15
 800160c:	683a      	ldr	r2, [r7, #0]
 800160e:	429a      	cmp	r2, r3
 8001610:	d910      	bls.n	8001634 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001612:	4b8e      	ldr	r3, [pc, #568]	@ (800184c <HAL_RCC_ClockConfig+0x260>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f023 020f 	bic.w	r2, r3, #15
 800161a:	498c      	ldr	r1, [pc, #560]	@ (800184c <HAL_RCC_ClockConfig+0x260>)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	4313      	orrs	r3, r2
 8001620:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001622:	4b8a      	ldr	r3, [pc, #552]	@ (800184c <HAL_RCC_ClockConfig+0x260>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 030f 	and.w	r3, r3, #15
 800162a:	683a      	ldr	r2, [r7, #0]
 800162c:	429a      	cmp	r2, r3
 800162e:	d001      	beq.n	8001634 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e106      	b.n	8001842 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0301 	and.w	r3, r3, #1
 800163c:	2b00      	cmp	r3, #0
 800163e:	d073      	beq.n	8001728 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	2b03      	cmp	r3, #3
 8001646:	d129      	bne.n	800169c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001648:	4b81      	ldr	r3, [pc, #516]	@ (8001850 <HAL_RCC_ClockConfig+0x264>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d101      	bne.n	8001658 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e0f4      	b.n	8001842 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001658:	f000 f966 	bl	8001928 <RCC_GetSysClockFreqFromPLLSource>
 800165c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	4a7c      	ldr	r2, [pc, #496]	@ (8001854 <HAL_RCC_ClockConfig+0x268>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d93f      	bls.n	80016e6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001666:	4b7a      	ldr	r3, [pc, #488]	@ (8001850 <HAL_RCC_ClockConfig+0x264>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d009      	beq.n	8001686 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800167a:	2b00      	cmp	r3, #0
 800167c:	d033      	beq.n	80016e6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001682:	2b00      	cmp	r3, #0
 8001684:	d12f      	bne.n	80016e6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001686:	4b72      	ldr	r3, [pc, #456]	@ (8001850 <HAL_RCC_ClockConfig+0x264>)
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800168e:	4a70      	ldr	r2, [pc, #448]	@ (8001850 <HAL_RCC_ClockConfig+0x264>)
 8001690:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001694:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001696:	2380      	movs	r3, #128	@ 0x80
 8001698:	617b      	str	r3, [r7, #20]
 800169a:	e024      	b.n	80016e6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d107      	bne.n	80016b4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016a4:	4b6a      	ldr	r3, [pc, #424]	@ (8001850 <HAL_RCC_ClockConfig+0x264>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d109      	bne.n	80016c4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e0c6      	b.n	8001842 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016b4:	4b66      	ldr	r3, [pc, #408]	@ (8001850 <HAL_RCC_ClockConfig+0x264>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d101      	bne.n	80016c4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e0be      	b.n	8001842 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80016c4:	f000 f8ce 	bl	8001864 <HAL_RCC_GetSysClockFreq>
 80016c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	4a61      	ldr	r2, [pc, #388]	@ (8001854 <HAL_RCC_ClockConfig+0x268>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d909      	bls.n	80016e6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80016d2:	4b5f      	ldr	r3, [pc, #380]	@ (8001850 <HAL_RCC_ClockConfig+0x264>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80016da:	4a5d      	ldr	r2, [pc, #372]	@ (8001850 <HAL_RCC_ClockConfig+0x264>)
 80016dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016e0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80016e2:	2380      	movs	r3, #128	@ 0x80
 80016e4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80016e6:	4b5a      	ldr	r3, [pc, #360]	@ (8001850 <HAL_RCC_ClockConfig+0x264>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f023 0203 	bic.w	r2, r3, #3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	4957      	ldr	r1, [pc, #348]	@ (8001850 <HAL_RCC_ClockConfig+0x264>)
 80016f4:	4313      	orrs	r3, r2
 80016f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80016f8:	f7ff f87c 	bl	80007f4 <HAL_GetTick>
 80016fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016fe:	e00a      	b.n	8001716 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001700:	f7ff f878 	bl	80007f4 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800170e:	4293      	cmp	r3, r2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e095      	b.n	8001842 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001716:	4b4e      	ldr	r3, [pc, #312]	@ (8001850 <HAL_RCC_ClockConfig+0x264>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f003 020c 	and.w	r2, r3, #12
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	429a      	cmp	r2, r3
 8001726:	d1eb      	bne.n	8001700 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0302 	and.w	r3, r3, #2
 8001730:	2b00      	cmp	r3, #0
 8001732:	d023      	beq.n	800177c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0304 	and.w	r3, r3, #4
 800173c:	2b00      	cmp	r3, #0
 800173e:	d005      	beq.n	800174c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001740:	4b43      	ldr	r3, [pc, #268]	@ (8001850 <HAL_RCC_ClockConfig+0x264>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	4a42      	ldr	r2, [pc, #264]	@ (8001850 <HAL_RCC_ClockConfig+0x264>)
 8001746:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800174a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0308 	and.w	r3, r3, #8
 8001754:	2b00      	cmp	r3, #0
 8001756:	d007      	beq.n	8001768 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001758:	4b3d      	ldr	r3, [pc, #244]	@ (8001850 <HAL_RCC_ClockConfig+0x264>)
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001760:	4a3b      	ldr	r2, [pc, #236]	@ (8001850 <HAL_RCC_ClockConfig+0x264>)
 8001762:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001766:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001768:	4b39      	ldr	r3, [pc, #228]	@ (8001850 <HAL_RCC_ClockConfig+0x264>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	4936      	ldr	r1, [pc, #216]	@ (8001850 <HAL_RCC_ClockConfig+0x264>)
 8001776:	4313      	orrs	r3, r2
 8001778:	608b      	str	r3, [r1, #8]
 800177a:	e008      	b.n	800178e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	2b80      	cmp	r3, #128	@ 0x80
 8001780:	d105      	bne.n	800178e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001782:	4b33      	ldr	r3, [pc, #204]	@ (8001850 <HAL_RCC_ClockConfig+0x264>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	4a32      	ldr	r2, [pc, #200]	@ (8001850 <HAL_RCC_ClockConfig+0x264>)
 8001788:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800178c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800178e:	4b2f      	ldr	r3, [pc, #188]	@ (800184c <HAL_RCC_ClockConfig+0x260>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 030f 	and.w	r3, r3, #15
 8001796:	683a      	ldr	r2, [r7, #0]
 8001798:	429a      	cmp	r2, r3
 800179a:	d21d      	bcs.n	80017d8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800179c:	4b2b      	ldr	r3, [pc, #172]	@ (800184c <HAL_RCC_ClockConfig+0x260>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f023 020f 	bic.w	r2, r3, #15
 80017a4:	4929      	ldr	r1, [pc, #164]	@ (800184c <HAL_RCC_ClockConfig+0x260>)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80017ac:	f7ff f822 	bl	80007f4 <HAL_GetTick>
 80017b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017b2:	e00a      	b.n	80017ca <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017b4:	f7ff f81e 	bl	80007f4 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e03b      	b.n	8001842 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ca:	4b20      	ldr	r3, [pc, #128]	@ (800184c <HAL_RCC_ClockConfig+0x260>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 030f 	and.w	r3, r3, #15
 80017d2:	683a      	ldr	r2, [r7, #0]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d1ed      	bne.n	80017b4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0304 	and.w	r3, r3, #4
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d008      	beq.n	80017f6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001850 <HAL_RCC_ClockConfig+0x264>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	4917      	ldr	r1, [pc, #92]	@ (8001850 <HAL_RCC_ClockConfig+0x264>)
 80017f2:	4313      	orrs	r3, r2
 80017f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0308 	and.w	r3, r3, #8
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d009      	beq.n	8001816 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001802:	4b13      	ldr	r3, [pc, #76]	@ (8001850 <HAL_RCC_ClockConfig+0x264>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	490f      	ldr	r1, [pc, #60]	@ (8001850 <HAL_RCC_ClockConfig+0x264>)
 8001812:	4313      	orrs	r3, r2
 8001814:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001816:	f000 f825 	bl	8001864 <HAL_RCC_GetSysClockFreq>
 800181a:	4602      	mov	r2, r0
 800181c:	4b0c      	ldr	r3, [pc, #48]	@ (8001850 <HAL_RCC_ClockConfig+0x264>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	091b      	lsrs	r3, r3, #4
 8001822:	f003 030f 	and.w	r3, r3, #15
 8001826:	490c      	ldr	r1, [pc, #48]	@ (8001858 <HAL_RCC_ClockConfig+0x26c>)
 8001828:	5ccb      	ldrb	r3, [r1, r3]
 800182a:	f003 031f 	and.w	r3, r3, #31
 800182e:	fa22 f303 	lsr.w	r3, r2, r3
 8001832:	4a0a      	ldr	r2, [pc, #40]	@ (800185c <HAL_RCC_ClockConfig+0x270>)
 8001834:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001836:	4b0a      	ldr	r3, [pc, #40]	@ (8001860 <HAL_RCC_ClockConfig+0x274>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4618      	mov	r0, r3
 800183c:	f7fe ff8e 	bl	800075c <HAL_InitTick>
 8001840:	4603      	mov	r3, r0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40022000 	.word	0x40022000
 8001850:	40021000 	.word	0x40021000
 8001854:	04c4b400 	.word	0x04c4b400
 8001858:	08002a80 	.word	0x08002a80
 800185c:	20000000 	.word	0x20000000
 8001860:	20000004 	.word	0x20000004

08001864 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001864:	b480      	push	{r7}
 8001866:	b087      	sub	sp, #28
 8001868:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800186a:	4b2c      	ldr	r3, [pc, #176]	@ (800191c <HAL_RCC_GetSysClockFreq+0xb8>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f003 030c 	and.w	r3, r3, #12
 8001872:	2b04      	cmp	r3, #4
 8001874:	d102      	bne.n	800187c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001876:	4b2a      	ldr	r3, [pc, #168]	@ (8001920 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001878:	613b      	str	r3, [r7, #16]
 800187a:	e047      	b.n	800190c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800187c:	4b27      	ldr	r3, [pc, #156]	@ (800191c <HAL_RCC_GetSysClockFreq+0xb8>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f003 030c 	and.w	r3, r3, #12
 8001884:	2b08      	cmp	r3, #8
 8001886:	d102      	bne.n	800188e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001888:	4b26      	ldr	r3, [pc, #152]	@ (8001924 <HAL_RCC_GetSysClockFreq+0xc0>)
 800188a:	613b      	str	r3, [r7, #16]
 800188c:	e03e      	b.n	800190c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800188e:	4b23      	ldr	r3, [pc, #140]	@ (800191c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f003 030c 	and.w	r3, r3, #12
 8001896:	2b0c      	cmp	r3, #12
 8001898:	d136      	bne.n	8001908 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800189a:	4b20      	ldr	r3, [pc, #128]	@ (800191c <HAL_RCC_GetSysClockFreq+0xb8>)
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	f003 0303 	and.w	r3, r3, #3
 80018a2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80018a4:	4b1d      	ldr	r3, [pc, #116]	@ (800191c <HAL_RCC_GetSysClockFreq+0xb8>)
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	091b      	lsrs	r3, r3, #4
 80018aa:	f003 030f 	and.w	r3, r3, #15
 80018ae:	3301      	adds	r3, #1
 80018b0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2b03      	cmp	r3, #3
 80018b6:	d10c      	bne.n	80018d2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80018b8:	4a1a      	ldr	r2, [pc, #104]	@ (8001924 <HAL_RCC_GetSysClockFreq+0xc0>)
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c0:	4a16      	ldr	r2, [pc, #88]	@ (800191c <HAL_RCC_GetSysClockFreq+0xb8>)
 80018c2:	68d2      	ldr	r2, [r2, #12]
 80018c4:	0a12      	lsrs	r2, r2, #8
 80018c6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80018ca:	fb02 f303 	mul.w	r3, r2, r3
 80018ce:	617b      	str	r3, [r7, #20]
      break;
 80018d0:	e00c      	b.n	80018ec <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80018d2:	4a13      	ldr	r2, [pc, #76]	@ (8001920 <HAL_RCC_GetSysClockFreq+0xbc>)
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018da:	4a10      	ldr	r2, [pc, #64]	@ (800191c <HAL_RCC_GetSysClockFreq+0xb8>)
 80018dc:	68d2      	ldr	r2, [r2, #12]
 80018de:	0a12      	lsrs	r2, r2, #8
 80018e0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80018e4:	fb02 f303 	mul.w	r3, r2, r3
 80018e8:	617b      	str	r3, [r7, #20]
      break;
 80018ea:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80018ec:	4b0b      	ldr	r3, [pc, #44]	@ (800191c <HAL_RCC_GetSysClockFreq+0xb8>)
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	0e5b      	lsrs	r3, r3, #25
 80018f2:	f003 0303 	and.w	r3, r3, #3
 80018f6:	3301      	adds	r3, #1
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80018fc:	697a      	ldr	r2, [r7, #20]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	fbb2 f3f3 	udiv	r3, r2, r3
 8001904:	613b      	str	r3, [r7, #16]
 8001906:	e001      	b.n	800190c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001908:	2300      	movs	r3, #0
 800190a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800190c:	693b      	ldr	r3, [r7, #16]
}
 800190e:	4618      	mov	r0, r3
 8001910:	371c      	adds	r7, #28
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	40021000 	.word	0x40021000
 8001920:	00f42400 	.word	0x00f42400
 8001924:	007a1200 	.word	0x007a1200

08001928 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001928:	b480      	push	{r7}
 800192a:	b087      	sub	sp, #28
 800192c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800192e:	4b1e      	ldr	r3, [pc, #120]	@ (80019a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	f003 0303 	and.w	r3, r3, #3
 8001936:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001938:	4b1b      	ldr	r3, [pc, #108]	@ (80019a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	091b      	lsrs	r3, r3, #4
 800193e:	f003 030f 	and.w	r3, r3, #15
 8001942:	3301      	adds	r3, #1
 8001944:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	2b03      	cmp	r3, #3
 800194a:	d10c      	bne.n	8001966 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800194c:	4a17      	ldr	r2, [pc, #92]	@ (80019ac <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	fbb2 f3f3 	udiv	r3, r2, r3
 8001954:	4a14      	ldr	r2, [pc, #80]	@ (80019a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001956:	68d2      	ldr	r2, [r2, #12]
 8001958:	0a12      	lsrs	r2, r2, #8
 800195a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800195e:	fb02 f303 	mul.w	r3, r2, r3
 8001962:	617b      	str	r3, [r7, #20]
    break;
 8001964:	e00c      	b.n	8001980 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001966:	4a12      	ldr	r2, [pc, #72]	@ (80019b0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	fbb2 f3f3 	udiv	r3, r2, r3
 800196e:	4a0e      	ldr	r2, [pc, #56]	@ (80019a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001970:	68d2      	ldr	r2, [r2, #12]
 8001972:	0a12      	lsrs	r2, r2, #8
 8001974:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001978:	fb02 f303 	mul.w	r3, r2, r3
 800197c:	617b      	str	r3, [r7, #20]
    break;
 800197e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001980:	4b09      	ldr	r3, [pc, #36]	@ (80019a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	0e5b      	lsrs	r3, r3, #25
 8001986:	f003 0303 	and.w	r3, r3, #3
 800198a:	3301      	adds	r3, #1
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001990:	697a      	ldr	r2, [r7, #20]
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	fbb2 f3f3 	udiv	r3, r2, r3
 8001998:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800199a:	687b      	ldr	r3, [r7, #4]
}
 800199c:	4618      	mov	r0, r3
 800199e:	371c      	adds	r7, #28
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	40021000 	.word	0x40021000
 80019ac:	007a1200 	.word	0x007a1200
 80019b0:	00f42400 	.word	0x00f42400

080019b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e09d      	b.n	8001b02 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d108      	bne.n	80019e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80019d6:	d009      	beq.n	80019ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	61da      	str	r2, [r3, #28]
 80019de:	e005      	b.n	80019ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d106      	bne.n	8001a0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f7fe fd9c 	bl	8000544 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2202      	movs	r2, #2
 8001a10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001a22:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001a2c:	d902      	bls.n	8001a34 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	e002      	b.n	8001a3a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001a34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a38:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8001a42:	d007      	beq.n	8001a54 <HAL_SPI_Init+0xa0>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001a4c:	d002      	beq.n	8001a54 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001a64:	431a      	orrs	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	691b      	ldr	r3, [r3, #16]
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	431a      	orrs	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	695b      	ldr	r3, [r3, #20]
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	431a      	orrs	r2, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a82:	431a      	orrs	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	69db      	ldr	r3, [r3, #28]
 8001a88:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001a8c:	431a      	orrs	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a1b      	ldr	r3, [r3, #32]
 8001a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a96:	ea42 0103 	orr.w	r1, r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a9e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	0c1b      	lsrs	r3, r3, #16
 8001ab0:	f003 0204 	and.w	r2, r3, #4
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab8:	f003 0310 	and.w	r3, r3, #16
 8001abc:	431a      	orrs	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ac2:	f003 0308 	and.w	r3, r3, #8
 8001ac6:	431a      	orrs	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001ad0:	ea42 0103 	orr.w	r1, r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	69da      	ldr	r2, [r3, #28]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001af0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b088      	sub	sp, #32
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	60f8      	str	r0, [r7, #12]
 8001b12:	60b9      	str	r1, [r7, #8]
 8001b14:	603b      	str	r3, [r7, #0]
 8001b16:	4613      	mov	r3, r2
 8001b18:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001b1a:	f7fe fe6b 	bl	80007f4 <HAL_GetTick>
 8001b1e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001b20:	88fb      	ldrh	r3, [r7, #6]
 8001b22:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d001      	beq.n	8001b34 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001b30:	2302      	movs	r3, #2
 8001b32:	e15c      	b.n	8001dee <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d002      	beq.n	8001b40 <HAL_SPI_Transmit+0x36>
 8001b3a:	88fb      	ldrh	r3, [r7, #6]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d101      	bne.n	8001b44 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e154      	b.n	8001dee <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d101      	bne.n	8001b52 <HAL_SPI_Transmit+0x48>
 8001b4e:	2302      	movs	r3, #2
 8001b50:	e14d      	b.n	8001dee <HAL_SPI_Transmit+0x2e4>
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2201      	movs	r2, #1
 8001b56:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2203      	movs	r2, #3
 8001b5e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2200      	movs	r2, #0
 8001b66:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	68ba      	ldr	r2, [r7, #8]
 8001b6c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	88fa      	ldrh	r2, [r7, #6]
 8001b72:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	88fa      	ldrh	r2, [r7, #6]
 8001b78:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2200      	movs	r2, #0
 8001b94:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ba4:	d10f      	bne.n	8001bc6 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001bb4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001bc4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bd0:	2b40      	cmp	r3, #64	@ 0x40
 8001bd2:	d007      	beq.n	8001be4 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001be2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001bec:	d952      	bls.n	8001c94 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d002      	beq.n	8001bfc <HAL_SPI_Transmit+0xf2>
 8001bf6:	8b7b      	ldrh	r3, [r7, #26]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d145      	bne.n	8001c88 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c00:	881a      	ldrh	r2, [r3, #0]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c0c:	1c9a      	adds	r2, r3, #2
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001c20:	e032      	b.n	8001c88 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d112      	bne.n	8001c56 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c34:	881a      	ldrh	r2, [r3, #0]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c40:	1c9a      	adds	r2, r3, #2
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001c54:	e018      	b.n	8001c88 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c56:	f7fe fdcd 	bl	80007f4 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	683a      	ldr	r2, [r7, #0]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d803      	bhi.n	8001c6e <HAL_SPI_Transmit+0x164>
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001c6c:	d102      	bne.n	8001c74 <HAL_SPI_Transmit+0x16a>
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d109      	bne.n	8001c88 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e0b2      	b.n	8001dee <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d1c7      	bne.n	8001c22 <HAL_SPI_Transmit+0x118>
 8001c92:	e083      	b.n	8001d9c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d002      	beq.n	8001ca2 <HAL_SPI_Transmit+0x198>
 8001c9c:	8b7b      	ldrh	r3, [r7, #26]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d177      	bne.n	8001d92 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d912      	bls.n	8001cd2 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cb0:	881a      	ldrh	r2, [r3, #0]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cbc:	1c9a      	adds	r2, r3, #2
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	3b02      	subs	r3, #2
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001cd0:	e05f      	b.n	8001d92 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	330c      	adds	r3, #12
 8001cdc:	7812      	ldrb	r2, [r2, #0]
 8001cde:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ce4:	1c5a      	adds	r2, r3, #1
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8001cf8:	e04b      	b.n	8001d92 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d12b      	bne.n	8001d60 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d912      	bls.n	8001d38 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d16:	881a      	ldrh	r2, [r3, #0]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d22:	1c9a      	adds	r2, r3, #2
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	3b02      	subs	r3, #2
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001d36:	e02c      	b.n	8001d92 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	330c      	adds	r3, #12
 8001d42:	7812      	ldrb	r2, [r2, #0]
 8001d44:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d4a:	1c5a      	adds	r2, r3, #1
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	3b01      	subs	r3, #1
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001d5e:	e018      	b.n	8001d92 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d60:	f7fe fd48 	bl	80007f4 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	683a      	ldr	r2, [r7, #0]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d803      	bhi.n	8001d78 <HAL_SPI_Transmit+0x26e>
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001d76:	d102      	bne.n	8001d7e <HAL_SPI_Transmit+0x274>
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d109      	bne.n	8001d92 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2201      	movs	r2, #1
 8001d82:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e02d      	b.n	8001dee <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1ae      	bne.n	8001cfa <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001d9c:	69fa      	ldr	r2, [r7, #28]
 8001d9e:	6839      	ldr	r1, [r7, #0]
 8001da0:	68f8      	ldr	r0, [r7, #12]
 8001da2:	f000 fd75 	bl	8002890 <SPI_EndRxTxTransaction>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d002      	beq.n	8001db2 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2220      	movs	r2, #32
 8001db0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d10a      	bne.n	8001dd0 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001dba:	2300      	movs	r3, #0
 8001dbc:	617b      	str	r3, [r7, #20]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	617b      	str	r3, [r7, #20]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	617b      	str	r3, [r7, #20]
 8001dce:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e000      	b.n	8001dee <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8001dec:	2300      	movs	r3, #0
  }
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3720      	adds	r7, #32
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
	...

08001df8 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	4613      	mov	r3, r2
 8001e04:	80fb      	strh	r3, [r7, #6]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d001      	beq.n	8001e16 <HAL_SPI_Receive_IT+0x1e>
  {
    return HAL_BUSY;
 8001e12:	2302      	movs	r3, #2
 8001e14:	e092      	b.n	8001f3c <HAL_SPI_Receive_IT+0x144>
  }

  if ((pData == NULL) || (Size == 0U))
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d002      	beq.n	8001e22 <HAL_SPI_Receive_IT+0x2a>
 8001e1c:	88fb      	ldrh	r3, [r7, #6]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d101      	bne.n	8001e26 <HAL_SPI_Receive_IT+0x2e>
  {
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e08a      	b.n	8001f3c <HAL_SPI_Receive_IT+0x144>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d110      	bne.n	8001e50 <HAL_SPI_Receive_IT+0x58>
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001e36:	d10b      	bne.n	8001e50 <HAL_SPI_Receive_IT+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2204      	movs	r2, #4
 8001e3c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8001e40:	88fb      	ldrh	r3, [r7, #6]
 8001e42:	68ba      	ldr	r2, [r7, #8]
 8001e44:	68b9      	ldr	r1, [r7, #8]
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	f000 f880 	bl	8001f4c <HAL_SPI_TransmitReceive_IT>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	e075      	b.n	8001f3c <HAL_SPI_Receive_IT+0x144>
  }


  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d101      	bne.n	8001e5e <HAL_SPI_Receive_IT+0x66>
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	e06e      	b.n	8001f3c <HAL_SPI_Receive_IT+0x144>
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2201      	movs	r2, #1
 8001e62:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2204      	movs	r2, #4
 8001e6a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2200      	movs	r2, #0
 8001e72:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	68ba      	ldr	r2, [r7, #8]
 8001e78:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	88fa      	ldrh	r2, [r7, #6]
 8001e7e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	88fa      	ldrh	r2, [r7, #6]
 8001e86:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2200      	movs	r2, #0
 8001e94:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001eaa:	d90b      	bls.n	8001ec4 <HAL_SPI_Receive_IT+0xcc>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	685a      	ldr	r2, [r3, #4]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001eba:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	4a21      	ldr	r2, [pc, #132]	@ (8001f44 <HAL_SPI_Receive_IT+0x14c>)
 8001ec0:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001ec2:	e00a      	b.n	8001eda <HAL_SPI_Receive_IT+0xe2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001ed2:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4a1c      	ldr	r2, [pc, #112]	@ (8001f48 <HAL_SPI_Receive_IT+0x150>)
 8001ed8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ee2:	d10f      	bne.n	8001f04 <HAL_SPI_Receive_IT+0x10c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001ef2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001f02:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f0e:	2b40      	cmp	r3, #64	@ 0x40
 8001f10:	d007      	beq.n	8001f22 <HAL_SPI_Receive_IT+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001f20:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	685a      	ldr	r2, [r3, #4]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8001f38:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3710      	adds	r7, #16
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	08002559 	.word	0x08002559
 8001f48:	08002509 	.word	0x08002509

08001f4c <HAL_SPI_TransmitReceive_IT>:
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b087      	sub	sp, #28
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
 8001f58:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001f60:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001f68:	7dfb      	ldrb	r3, [r7, #23]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d00c      	beq.n	8001f88 <HAL_SPI_TransmitReceive_IT+0x3c>
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001f74:	d106      	bne.n	8001f84 <HAL_SPI_TransmitReceive_IT+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d102      	bne.n	8001f84 <HAL_SPI_TransmitReceive_IT+0x38>
 8001f7e:	7dfb      	ldrb	r3, [r7, #23]
 8001f80:	2b04      	cmp	r3, #4
 8001f82:	d001      	beq.n	8001f88 <HAL_SPI_TransmitReceive_IT+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8001f84:	2302      	movs	r3, #2
 8001f86:	e07d      	b.n	8002084 <HAL_SPI_TransmitReceive_IT+0x138>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d005      	beq.n	8001f9a <HAL_SPI_TransmitReceive_IT+0x4e>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d002      	beq.n	8001f9a <HAL_SPI_TransmitReceive_IT+0x4e>
 8001f94:	887b      	ldrh	r3, [r7, #2]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <HAL_SPI_TransmitReceive_IT+0x52>
  {
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e072      	b.n	8002084 <HAL_SPI_TransmitReceive_IT+0x138>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d101      	bne.n	8001fac <HAL_SPI_TransmitReceive_IT+0x60>
 8001fa8:	2302      	movs	r3, #2
 8001faa:	e06b      	b.n	8002084 <HAL_SPI_TransmitReceive_IT+0x138>
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	2b04      	cmp	r3, #4
 8001fbe:	d003      	beq.n	8001fc8 <HAL_SPI_TransmitReceive_IT+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2205      	movs	r2, #5
 8001fc4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	68ba      	ldr	r2, [r7, #8]
 8001fd2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	887a      	ldrh	r2, [r7, #2]
 8001fd8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	887a      	ldrh	r2, [r7, #2]
 8001fde:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	887a      	ldrh	r2, [r7, #2]
 8001fea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	887a      	ldrh	r2, [r7, #2]
 8001ff2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001ffe:	d906      	bls.n	800200e <HAL_SPI_TransmitReceive_IT+0xc2>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4a23      	ldr	r2, [pc, #140]	@ (8002090 <HAL_SPI_TransmitReceive_IT+0x144>)
 8002004:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	4a22      	ldr	r2, [pc, #136]	@ (8002094 <HAL_SPI_TransmitReceive_IT+0x148>)
 800200a:	651a      	str	r2, [r3, #80]	@ 0x50
 800200c:	e005      	b.n	800201a <HAL_SPI_TransmitReceive_IT+0xce>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	4a21      	ldr	r2, [pc, #132]	@ (8002098 <HAL_SPI_TransmitReceive_IT+0x14c>)
 8002012:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	4a21      	ldr	r2, [pc, #132]	@ (800209c <HAL_SPI_TransmitReceive_IT+0x150>)
 8002018:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002022:	d802      	bhi.n	800202a <HAL_SPI_TransmitReceive_IT+0xde>
 8002024:	887b      	ldrh	r3, [r7, #2]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d908      	bls.n	800203c <HAL_SPI_TransmitReceive_IT+0xf0>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	685a      	ldr	r2, [r3, #4]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002038:	605a      	str	r2, [r3, #4]
 800203a:	e007      	b.n	800204c <HAL_SPI_TransmitReceive_IT+0x100>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	685a      	ldr	r2, [r3, #4]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800204a:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002056:	2b40      	cmp	r3, #64	@ 0x40
 8002058:	d007      	beq.n	800206a <HAL_SPI_TransmitReceive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002068:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	685a      	ldr	r2, [r3, #4]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8002080:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	371c      	adds	r7, #28
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	08002443 	.word	0x08002443
 8002094:	080024a9 	.word	0x080024a9
 8002098:	080022f3 	.word	0x080022f3
 800209c:	080023b1 	.word	0x080023b1

080020a0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b088      	sub	sp, #32
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	099b      	lsrs	r3, r3, #6
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d10f      	bne.n	80020e4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00a      	beq.n	80020e4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	099b      	lsrs	r3, r3, #6
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d004      	beq.n	80020e4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	4798      	blx	r3
    return;
 80020e2:	e0d7      	b.n	8002294 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	085b      	lsrs	r3, r3, #1
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d00a      	beq.n	8002106 <HAL_SPI_IRQHandler+0x66>
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	09db      	lsrs	r3, r3, #7
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d004      	beq.n	8002106 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	4798      	blx	r3
    return;
 8002104:	e0c6      	b.n	8002294 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	095b      	lsrs	r3, r3, #5
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	2b00      	cmp	r3, #0
 8002110:	d10c      	bne.n	800212c <HAL_SPI_IRQHandler+0x8c>
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	099b      	lsrs	r3, r3, #6
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b00      	cmp	r3, #0
 800211c:	d106      	bne.n	800212c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	0a1b      	lsrs	r3, r3, #8
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	2b00      	cmp	r3, #0
 8002128:	f000 80b4 	beq.w	8002294 <HAL_SPI_IRQHandler+0x1f4>
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	095b      	lsrs	r3, r3, #5
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	2b00      	cmp	r3, #0
 8002136:	f000 80ad 	beq.w	8002294 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	099b      	lsrs	r3, r3, #6
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b00      	cmp	r3, #0
 8002144:	d023      	beq.n	800218e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b03      	cmp	r3, #3
 8002150:	d011      	beq.n	8002176 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002156:	f043 0204 	orr.w	r2, r3, #4
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800215e:	2300      	movs	r3, #0
 8002160:	617b      	str	r3, [r7, #20]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	617b      	str	r3, [r7, #20]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	617b      	str	r3, [r7, #20]
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	e00b      	b.n	800218e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002176:	2300      	movs	r3, #0
 8002178:	613b      	str	r3, [r7, #16]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	613b      	str	r3, [r7, #16]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	613b      	str	r3, [r7, #16]
 800218a:	693b      	ldr	r3, [r7, #16]
        return;
 800218c:	e082      	b.n	8002294 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	095b      	lsrs	r3, r3, #5
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b00      	cmp	r3, #0
 8002198:	d014      	beq.n	80021c4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800219e:	f043 0201 	orr.w	r2, r3, #1
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80021a6:	2300      	movs	r3, #0
 80021a8:	60fb      	str	r3, [r7, #12]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	0a1b      	lsrs	r3, r3, #8
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00c      	beq.n	80021ea <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021d4:	f043 0208 	orr.w	r2, r3, #8
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80021dc:	2300      	movs	r3, #0
 80021de:	60bb      	str	r3, [r7, #8]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	60bb      	str	r3, [r7, #8]
 80021e8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d04f      	beq.n	8002292 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002200:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2201      	movs	r2, #1
 8002206:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d104      	bne.n	800221e <HAL_SPI_IRQHandler+0x17e>
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	2b00      	cmp	r3, #0
 800221c:	d034      	beq.n	8002288 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	685a      	ldr	r2, [r3, #4]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f022 0203 	bic.w	r2, r2, #3
 800222c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002232:	2b00      	cmp	r3, #0
 8002234:	d011      	beq.n	800225a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800223a:	4a18      	ldr	r2, [pc, #96]	@ (800229c <HAL_SPI_IRQHandler+0x1fc>)
 800223c:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002242:	4618      	mov	r0, r3
 8002244:	f7fe fbf1 	bl	8000a2a <HAL_DMA_Abort_IT>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d005      	beq.n	800225a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002252:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800225e:	2b00      	cmp	r3, #0
 8002260:	d016      	beq.n	8002290 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002266:	4a0d      	ldr	r2, [pc, #52]	@ (800229c <HAL_SPI_IRQHandler+0x1fc>)
 8002268:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800226e:	4618      	mov	r0, r3
 8002270:	f7fe fbdb 	bl	8000a2a <HAL_DMA_Abort_IT>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00a      	beq.n	8002290 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800227e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8002286:	e003      	b.n	8002290 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f000 f813 	bl	80022b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800228e:	e000      	b.n	8002292 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8002290:	bf00      	nop
    return;
 8002292:	bf00      	nop
  }
}
 8002294:	3720      	adds	r7, #32
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	080022c9 	.word	0x080022c9

080022a0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022d4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2200      	movs	r2, #0
 80022da:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80022e4:	68f8      	ldr	r0, [r7, #12]
 80022e6:	f7ff ffe5 	bl	80022b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80022ea:	bf00      	nop
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b082      	sub	sp, #8
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002300:	b29b      	uxth	r3, r3
 8002302:	2b01      	cmp	r3, #1
 8002304:	d923      	bls.n	800234e <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68da      	ldr	r2, [r3, #12]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002310:	b292      	uxth	r2, r2
 8002312:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002318:	1c9a      	adds	r2, r3, #2
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002324:	b29b      	uxth	r3, r3
 8002326:	3b02      	subs	r3, #2
 8002328:	b29a      	uxth	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    if (hspi->RxXferCount == 1U)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002336:	b29b      	uxth	r3, r3
 8002338:	2b01      	cmp	r3, #1
 800233a:	d11f      	bne.n	800237c <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800234a:	605a      	str	r2, [r3, #4]
 800234c:	e016      	b.n	800237c <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f103 020c 	add.w	r2, r3, #12
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800235a:	7812      	ldrb	r2, [r2, #0]
 800235c:	b2d2      	uxtb	r2, r2
 800235e:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002364:	1c5a      	adds	r2, r3, #1
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002370:	b29b      	uxth	r3, r3
 8002372:	3b01      	subs	r3, #1
 8002374:	b29a      	uxth	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002382:	b29b      	uxth	r3, r3
 8002384:	2b00      	cmp	r3, #0
 8002386:	d10f      	bne.n	80023a8 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	685a      	ldr	r2, [r3, #4]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002396:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800239c:	b29b      	uxth	r3, r3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d102      	bne.n	80023a8 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 faba 	bl	800291c <SPI_CloseRxTx_ISR>
    }
  }
}
 80023a8:	bf00      	nop
 80023aa:	3708      	adds	r7, #8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023bc:	b29b      	uxth	r3, r3
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d912      	bls.n	80023e8 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023c6:	881a      	ldrh	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023d2:	1c9a      	adds	r2, r3, #2
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023dc:	b29b      	uxth	r3, r3
 80023de:	3b02      	subs	r3, #2
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80023e6:	e012      	b.n	800240e <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	330c      	adds	r3, #12
 80023f2:	7812      	ldrb	r2, [r2, #0]
 80023f4:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023fa:	1c5a      	adds	r2, r3, #1
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002404:	b29b      	uxth	r3, r3
 8002406:	3b01      	subs	r3, #1
 8002408:	b29a      	uxth	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002412:	b29b      	uxth	r3, r3
 8002414:	2b00      	cmp	r3, #0
 8002416:	d110      	bne.n	800243a <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002426:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800242e:	b29b      	uxth	r3, r3
 8002430:	2b00      	cmp	r3, #0
 8002432:	d102      	bne.n	800243a <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 fa71 	bl	800291c <SPI_CloseRxTx_ISR>
    }
  }
}
 800243a:	bf00      	nop
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b082      	sub	sp, #8
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68da      	ldr	r2, [r3, #12]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002454:	b292      	uxth	r2, r2
 8002456:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245c:	1c9a      	adds	r2, r3, #2
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002468:	b29b      	uxth	r3, r3
 800246a:	3b01      	subs	r3, #1
 800246c:	b29a      	uxth	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  if (hspi->RxXferCount == 0U)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800247a:	b29b      	uxth	r3, r3
 800247c:	2b00      	cmp	r3, #0
 800247e:	d10f      	bne.n	80024a0 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	685a      	ldr	r2, [r3, #4]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800248e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002494:	b29b      	uxth	r3, r3
 8002496:	2b00      	cmp	r3, #0
 8002498:	d102      	bne.n	80024a0 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 fa3e 	bl	800291c <SPI_CloseRxTx_ISR>
    }
  }
}
 80024a0:	bf00      	nop
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024b4:	881a      	ldrh	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024c0:	1c9a      	adds	r2, r3, #2
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	3b01      	subs	r3, #1
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80024d8:	b29b      	uxth	r3, r3
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d110      	bne.n	8002500 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	685a      	ldr	r2, [r3, #4]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80024ec:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d102      	bne.n	8002500 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 fa0e 	bl	800291c <SPI_CloseRxTx_ISR>
    }
  }
}
 8002500:	bf00      	nop
 8002502:	3708      	adds	r7, #8
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f103 020c 	add.w	r2, r3, #12
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251c:	7812      	ldrb	r2, [r2, #0]
 800251e:	b2d2      	uxtb	r2, r2
 8002520:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002526:	1c5a      	adds	r2, r3, #1
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002532:	b29b      	uxth	r3, r3
 8002534:	3b01      	subs	r3, #1
 8002536:	b29a      	uxth	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002544:	b29b      	uxth	r3, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d102      	bne.n	8002550 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 fa28 	bl	80029a0 <SPI_CloseRx_ISR>
  }
}
 8002550:	bf00      	nop
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68da      	ldr	r2, [r3, #12]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256a:	b292      	uxth	r2, r2
 800256c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002572:	1c9a      	adds	r2, r3, #2
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800257e:	b29b      	uxth	r3, r3
 8002580:	3b01      	subs	r3, #1
 8002582:	b29a      	uxth	r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002590:	b29b      	uxth	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d102      	bne.n	800259c <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 fa02 	bl	80029a0 <SPI_CloseRx_ISR>
  }
}
 800259c:	bf00      	nop
 800259e:	3708      	adds	r7, #8
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b088      	sub	sp, #32
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	603b      	str	r3, [r7, #0]
 80025b0:	4613      	mov	r3, r2
 80025b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80025b4:	f7fe f91e 	bl	80007f4 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025bc:	1a9b      	subs	r3, r3, r2
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	4413      	add	r3, r2
 80025c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80025c4:	f7fe f916 	bl	80007f4 <HAL_GetTick>
 80025c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80025ca:	4b39      	ldr	r3, [pc, #228]	@ (80026b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	015b      	lsls	r3, r3, #5
 80025d0:	0d1b      	lsrs	r3, r3, #20
 80025d2:	69fa      	ldr	r2, [r7, #28]
 80025d4:	fb02 f303 	mul.w	r3, r2, r3
 80025d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80025da:	e054      	b.n	8002686 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80025e2:	d050      	beq.n	8002686 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80025e4:	f7fe f906 	bl	80007f4 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	69fa      	ldr	r2, [r7, #28]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d902      	bls.n	80025fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d13d      	bne.n	8002676 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	685a      	ldr	r2, [r3, #4]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002608:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002612:	d111      	bne.n	8002638 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800261c:	d004      	beq.n	8002628 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002626:	d107      	bne.n	8002638 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002636:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800263c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002640:	d10f      	bne.n	8002662 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002650:	601a      	str	r2, [r3, #0]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002660:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2201      	movs	r2, #1
 8002666:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e017      	b.n	80026a6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d101      	bne.n	8002680 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800267c:	2300      	movs	r3, #0
 800267e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	3b01      	subs	r3, #1
 8002684:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	4013      	ands	r3, r2
 8002690:	68ba      	ldr	r2, [r7, #8]
 8002692:	429a      	cmp	r2, r3
 8002694:	bf0c      	ite	eq
 8002696:	2301      	moveq	r3, #1
 8002698:	2300      	movne	r3, #0
 800269a:	b2db      	uxtb	r3, r3
 800269c:	461a      	mov	r2, r3
 800269e:	79fb      	ldrb	r3, [r7, #7]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d19b      	bne.n	80025dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3720      	adds	r7, #32
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	20000000 	.word	0x20000000

080026b4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b08a      	sub	sp, #40	@ 0x28
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
 80026c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80026c2:	2300      	movs	r3, #0
 80026c4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80026c6:	f7fe f895 	bl	80007f4 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026ce:	1a9b      	subs	r3, r3, r2
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	4413      	add	r3, r2
 80026d4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80026d6:	f7fe f88d 	bl	80007f4 <HAL_GetTick>
 80026da:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	330c      	adds	r3, #12
 80026e2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80026e4:	4b3d      	ldr	r3, [pc, #244]	@ (80027dc <SPI_WaitFifoStateUntilTimeout+0x128>)
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	4613      	mov	r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	4413      	add	r3, r2
 80026ee:	00da      	lsls	r2, r3, #3
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	0d1b      	lsrs	r3, r3, #20
 80026f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026f6:	fb02 f303 	mul.w	r3, r2, r3
 80026fa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80026fc:	e060      	b.n	80027c0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002704:	d107      	bne.n	8002716 <SPI_WaitFifoStateUntilTimeout+0x62>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d104      	bne.n	8002716 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	b2db      	uxtb	r3, r3
 8002712:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002714:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800271c:	d050      	beq.n	80027c0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800271e:	f7fe f869 	bl	80007f4 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	6a3b      	ldr	r3, [r7, #32]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800272a:	429a      	cmp	r2, r3
 800272c:	d902      	bls.n	8002734 <SPI_WaitFifoStateUntilTimeout+0x80>
 800272e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002730:	2b00      	cmp	r3, #0
 8002732:	d13d      	bne.n	80027b0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	685a      	ldr	r2, [r3, #4]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002742:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800274c:	d111      	bne.n	8002772 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002756:	d004      	beq.n	8002762 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002760:	d107      	bne.n	8002772 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002770:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002776:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800277a:	d10f      	bne.n	800279c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800279a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e010      	b.n	80027d2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80027b6:	2300      	movs	r3, #0
 80027b8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	3b01      	subs	r3, #1
 80027be:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	689a      	ldr	r2, [r3, #8]
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	4013      	ands	r3, r2
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d196      	bne.n	80026fe <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3728      	adds	r7, #40	@ 0x28
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	20000000 	.word	0x20000000

080027e0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af02      	add	r7, sp, #8
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80027f4:	d111      	bne.n	800281a <SPI_EndRxTransaction+0x3a>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027fe:	d004      	beq.n	800280a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002808:	d107      	bne.n	800281a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002818:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	9300      	str	r3, [sp, #0]
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	2200      	movs	r2, #0
 8002822:	2180      	movs	r1, #128	@ 0x80
 8002824:	68f8      	ldr	r0, [r7, #12]
 8002826:	f7ff febd 	bl	80025a4 <SPI_WaitFlagStateUntilTimeout>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d007      	beq.n	8002840 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002834:	f043 0220 	orr.w	r2, r3, #32
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e023      	b.n	8002888 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002848:	d11d      	bne.n	8002886 <SPI_EndRxTransaction+0xa6>
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002852:	d004      	beq.n	800285e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800285c:	d113      	bne.n	8002886 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	9300      	str	r3, [sp, #0]
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	2200      	movs	r2, #0
 8002866:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f7ff ff22 	bl	80026b4 <SPI_WaitFifoStateUntilTimeout>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d007      	beq.n	8002886 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800287a:	f043 0220 	orr.w	r2, r3, #32
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e000      	b.n	8002888 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af02      	add	r7, sp, #8
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	9300      	str	r3, [sp, #0]
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80028a8:	68f8      	ldr	r0, [r7, #12]
 80028aa:	f7ff ff03 	bl	80026b4 <SPI_WaitFifoStateUntilTimeout>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d007      	beq.n	80028c4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028b8:	f043 0220 	orr.w	r2, r3, #32
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e027      	b.n	8002914 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	9300      	str	r3, [sp, #0]
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	2200      	movs	r2, #0
 80028cc:	2180      	movs	r1, #128	@ 0x80
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f7ff fe68 	bl	80025a4 <SPI_WaitFlagStateUntilTimeout>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d007      	beq.n	80028ea <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028de:	f043 0220 	orr.w	r2, r3, #32
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e014      	b.n	8002914 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	9300      	str	r3, [sp, #0]
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f7ff fedc 	bl	80026b4 <SPI_WaitFifoStateUntilTimeout>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d007      	beq.n	8002912 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002906:	f043 0220 	orr.w	r2, r3, #32
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e000      	b.n	8002914 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002924:	f7fd ff66 	bl	80007f4 <HAL_GetTick>
 8002928:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	685a      	ldr	r2, [r3, #4]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f022 0220 	bic.w	r2, r2, #32
 8002938:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	2164      	movs	r1, #100	@ 0x64
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7ff ffa6 	bl	8002890 <SPI_EndRxTxTransaction>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d005      	beq.n	8002956 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800294e:	f043 0220 	orr.w	r2, r3, #32
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	661a      	str	r2, [r3, #96]	@ 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800295a:	2b00      	cmp	r3, #0
 800295c:	d115      	bne.n	800298a <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b04      	cmp	r3, #4
 8002968:	d107      	bne.n	800297a <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f7fd fda4 	bl	80004c0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8002978:	e00e      	b.n	8002998 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2201      	movs	r2, #1
 800297e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f7ff fc8c 	bl	80022a0 <HAL_SPI_TxRxCpltCallback>
}
 8002988:	e006      	b.n	8002998 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2201      	movs	r2, #1
 800298e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f7ff fc8e 	bl	80022b4 <HAL_SPI_ErrorCallback>
}
 8002998:	bf00      	nop
 800299a:	3710      	adds	r7, #16
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	685a      	ldr	r2, [r3, #4]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80029b6:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80029b8:	f7fd ff1c 	bl	80007f4 <HAL_GetTick>
 80029bc:	4603      	mov	r3, r0
 80029be:	461a      	mov	r2, r3
 80029c0:	2164      	movs	r1, #100	@ 0x64
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f7ff ff0c 	bl	80027e0 <SPI_EndRxTransaction>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d005      	beq.n	80029da <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029d2:	f043 0220 	orr.w	r2, r3, #32
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	661a      	str	r2, [r3, #96]	@ 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d103      	bne.n	80029f2 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f7fd fd68 	bl	80004c0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80029f0:	e002      	b.n	80029f8 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f7ff fc5e 	bl	80022b4 <HAL_SPI_ErrorCallback>
}
 80029f8:	bf00      	nop
 80029fa:	3708      	adds	r7, #8
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <memset>:
 8002a00:	4402      	add	r2, r0
 8002a02:	4603      	mov	r3, r0
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d100      	bne.n	8002a0a <memset+0xa>
 8002a08:	4770      	bx	lr
 8002a0a:	f803 1b01 	strb.w	r1, [r3], #1
 8002a0e:	e7f9      	b.n	8002a04 <memset+0x4>

08002a10 <__libc_init_array>:
 8002a10:	b570      	push	{r4, r5, r6, lr}
 8002a12:	4d0d      	ldr	r5, [pc, #52]	@ (8002a48 <__libc_init_array+0x38>)
 8002a14:	4c0d      	ldr	r4, [pc, #52]	@ (8002a4c <__libc_init_array+0x3c>)
 8002a16:	1b64      	subs	r4, r4, r5
 8002a18:	10a4      	asrs	r4, r4, #2
 8002a1a:	2600      	movs	r6, #0
 8002a1c:	42a6      	cmp	r6, r4
 8002a1e:	d109      	bne.n	8002a34 <__libc_init_array+0x24>
 8002a20:	4d0b      	ldr	r5, [pc, #44]	@ (8002a50 <__libc_init_array+0x40>)
 8002a22:	4c0c      	ldr	r4, [pc, #48]	@ (8002a54 <__libc_init_array+0x44>)
 8002a24:	f000 f818 	bl	8002a58 <_init>
 8002a28:	1b64      	subs	r4, r4, r5
 8002a2a:	10a4      	asrs	r4, r4, #2
 8002a2c:	2600      	movs	r6, #0
 8002a2e:	42a6      	cmp	r6, r4
 8002a30:	d105      	bne.n	8002a3e <__libc_init_array+0x2e>
 8002a32:	bd70      	pop	{r4, r5, r6, pc}
 8002a34:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a38:	4798      	blx	r3
 8002a3a:	3601      	adds	r6, #1
 8002a3c:	e7ee      	b.n	8002a1c <__libc_init_array+0xc>
 8002a3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a42:	4798      	blx	r3
 8002a44:	3601      	adds	r6, #1
 8002a46:	e7f2      	b.n	8002a2e <__libc_init_array+0x1e>
 8002a48:	08002a90 	.word	0x08002a90
 8002a4c:	08002a90 	.word	0x08002a90
 8002a50:	08002a90 	.word	0x08002a90
 8002a54:	08002a94 	.word	0x08002a94

08002a58 <_init>:
 8002a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a5a:	bf00      	nop
 8002a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a5e:	bc08      	pop	{r3}
 8002a60:	469e      	mov	lr, r3
 8002a62:	4770      	bx	lr

08002a64 <_fini>:
 8002a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a66:	bf00      	nop
 8002a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a6a:	bc08      	pop	{r3}
 8002a6c:	469e      	mov	lr, r3
 8002a6e:	4770      	bx	lr
